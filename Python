#-------------------------------------------------------------------------------
# Name:        Citywide_GSI.py
# Purpose:     Integrate all the GSI data into 1 point PV
# Date:        01/26/2018
# Author:      Seattle Public Utilities
# ArcGIS:      10.3
# Python:      2.7.8 (32 bit)
#-------------------------------------------------------------------------------

# Import python packages
import arcpy
import sys
import os
import traceback
import time
import cx_Oracle
import datetime
import unicodedata
import urllib
import json
from arcpy import env as env

#  Python Framework location
gis_library_path = ########
sys.path.append(gis_library_path)

# Import Python Framework modules
from PythonModule.ScriptModule import LogModule, CmdModule
from PythonModule.GeoModule import GeoDataModule, GeoProcModule

# Set environmental settings
env.overwriteOutput = True
env.qualifiedFieldNames = False
env.outputCoordinateSystem = 2926  #NAD_1983_HARN_SP_WA_North_FIPS_4601_Feet
env.parallelProcessingFactor = "100%"

# Sets a date/time stamp variable in the format yyyymmddhhmmss (example: 20060711132345)
dateTimeStamp = time.strftime('%Y%m%d%H%M%S')

# Start logging
logModule = LogModule
scriptName = os.path.basename(__file__).split(".")[0]
installPath = os.path.dirname(os.path.abspath(__file__))  # get the path where script resides
root = os.path.abspath(os.path.join(installPath, os.pardir))
dtStamp = dateTimeStamp[:12]
logFile = installPath + "\\Log\\" + scriptName + "_" + dtStamp + ".log"

# Set connections

sde = r"####"
dwwsde = r"####"
dprsde = r"####"
kcsde = r"####"
# sdotsde = r"####"
utilsde = r"####"
# sdot_conn = r"####"
dpr_conn = r"####"
carto_conn = r"####"
dww_conn = r"####"
datastor_con = cx_Oracle.connect(####)
con = cx_Oracle.connect(####)
dww_con = cx_Oracle.connect(####)
schema = "CARTO"

# Grab new key from GSI_SEQ
GRSP_SEQ = "CARTO.GSI_SEQ"
gKeySQL = "SELECT " + GRSP_SEQ + ".NEXTVAL from dual"

# Set workspace once the variables are set
env.workspace = sde

logModule.writeLog2(logFile, "START {0} on {1}".format(scriptName, sde))

# ---- Code starts here ---------------------------------------------------------------------------

def delta_time_system_timer(time_as_int):
    try:
        now = int(time.time())
        if time_as_int < 1:
            return now
        else:
            difference = now - time_as_int
            hours = difference / 3600
            minutes = (difference % 3600) / 60
            seconds = difference % 60
            return seconds, minutes, hours

    except Exception as e:
        return e


def check_sources():
    result = False
    try:
        global sca_lyr, bsn_lyr, wtrshd_lyr, poly_lyr, sdrn_lyr, scaVal, agVal, bmpVal, fndrVal, lstBMPFactor, lstID, \
            lstSITEADD3, rpt_data, transpo_cpn_dap_lyr, cgdb_lyr, transpo_cpndap_fields, cgdb_parcel_sv_fields, lstGAL

        # Create feature layer from DWW.SEWER_CLASS_AREA_PLGN
        scaFC = dwwsde + "\\DWW.SEWER_CLASS_AREA_PLGN"
        sca_lyr = "sca_lyr"
        arcpy.MakeFeatureLayer_management(scaFC, sca_lyr)

        # Create feature layer from DWW.CSO_BASIN_PLGN_PV
        cso_bsn_fc = dwwsde + "\\DWW.CSO_BASIN_PLGN_PV"
        bsn_lyr = "bsn_lyr"
        arcpy.MakeFeatureLayer_management(cso_bsn_fc, bsn_lyr)

        # Create feature layer from DWW.URBAN_CRK_WTRSHD_PLGN_PV
        urban_wtrshd_fc = dwwsde + "\\DWW.URBAN_CRK_WTRSHD_PLGN_PV"
        wtrshd_lyr = "wtrshd_lyr"
        arcpy.MakeFeatureLayer_management(urban_wtrshd_fc, wtrshd_lyr)

        # Create feature layer from DWW.POLYGON_PLGN_PV
        poly_pv = dwwsde + "\\DWW.POLYGON_PLGN_PV"
        poly_lyr = "poly_lyr"
        arcpy.MakeFeatureLayer_management(poly_pv, poly_lyr)

        # Create feature layer from DWW.SURFACE_DRAINLINE_LN
        sdrn = dwwsde + "\\DWW.SURFACE_DRAINLINE_LN"
        sdrn_lyr = "sdrn_lyr"
        arcpy.MakeFeatureLayer_management(sdrn, sdrn_lyr)

        # Get all the values in SCA CLASS domain for spatial overlay
        scaVal = [d.codedValues for d in arcpy.da.ListDomains(sde) if "DWW_SCA_CLASS_CODE" in d.name][0]

        # Get all keys & values in DWW_AGENCY_CODE domain - items() returns a list in Python 2.x
        agVal = [d.codedValues for d in arcpy.da.ListDomains(sde) if "DWW_AGENCY_CODE" in d.name][0].items()

        # Get all keys & values in CARTO.GSI_BMP_CODE
        bmpVal = [d.codedValues for d in arcpy.da.ListDomains(sde) if "GSI_BMP_CODE" in d.name][0].items()

        # Get all keys & values in FNDR_CODE domain
        fndrVal = [d.codedValues for d in arcpy.da.ListDomains(sde) if "GSI_PRJ_FNDR_CODE" in d.name][0].items()

        # Convert GSI_BMP_FACTOR table into lstBMPFactor
        bmp_factor = sde + "\\CARTO.GSI_BMP_FACTOR"
        lstBMPFactor = [b for b in arcpy.da.SearchCursor(bmp_factor, ["GBC_BMP_CODE", "GBC_MNGD_MTHD_TYPE", "GBC_MNGD_NBR",
                                                                   "GBC_AAR_NBR", "GBC_AAR_PL_NBR", "GBC_CFT_GLN_NBR", "GBC_CRDT_NBR"])]

        # Convert RAINWISE_CSO_BASIN_FACTOR table into lstGAL
        rw_cso_bsn_factor = sde + "\\CARTO.RAINWISE_CSO_BASIN_FACTOR" #Source: RW Total Gallons Calculator 030117.xlsx
        lstGAL = [g for g in arcpy.da.SearchCursor(rw_cso_bsn_factor, ["RC_KEY", "RC_CSO_BSN_TEXT", "RC_SQFT_GLN_NBR","RC_CNCTVTY_NBR"])]

        # Access DATASTOR.RPTDATA.DV_RPT_SITE_INSTALLED_DRAINAGE
        sql_command = """
                        SELECT 
                            NEW_REPLACE_IMPERVIOUS_SURFACE, 
                            FLOW_CONTROL_TYPE,
                            TREATMENT_TYPE, 
                            DATE_FINALED, 
                            SITE_ADDRESS,
                            DISCHARGE_POINT, 
                            GSI_TOTAL,
                            APTYPE,
                            PIN,
                            APNO
                        FROM 
                            RPTDATA.DV_RPT_SITE_INSTALLED_DRAINAGE
        """
        cur = datastor_con.cursor()

        rpt_data = cur.execute(sql_command)

        # Installed_drainage returned as a list
        lstID = list(rpt_data)

        lstSITEADD2 = sorted(set([str(p[4]) for p in lstID if p[4] is not None]))

        # Transform list into tuple
        lstSITEADD3 = tuple(lstSITEADD2)

        cur.close()

        transpo_cpndap_schema = "TRANSPO.CPNDAP"
        transpo_cpndap_path = os.path.join(utilsde, transpo_cpndap_schema)
        transpo_cpndap_fields = ["CPN_ADRS", "SHAPE@"]
        transpo_cpn_dap_lyr = [geom for geom in arcpy.da.SearchCursor(transpo_cpndap_path, transpo_cpndap_fields)]

        cgdb_parcel_sv_schema = "KCGIS.CGDB_PARCEL_SV"
        cgdb_parcel_sv_path = os.path.join(dwwsde, cgdb_parcel_sv_schema)
        cgdb_parcel_sv_fields = ["address", "pin", "SHAPE@"]
        cgdb_lyr = [geom for geom in arcpy.da.SearchCursor(cgdb_parcel_sv_path, cgdb_parcel_sv_fields)]

        result = True
    except:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
        logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())
    finally:
        if datastor_con is not None:
            datastor_con.close()
        return result


def create_seq():
    result = False
    try:
        # Create a new Oracle sequence GSI_SEQ
        sql = '''
        SELECT sequence_name 
        FROM user_sequences 
        WHERE sequence_name = 'GSI_SEQ';
        
        DROP SEQUENCE GSI_SEQ;

        CREATE SEQUENCE GSI_SEQ
        MINVALUE 1
        START WITH 1
        INCREMENT BY 1
        CACHE 20
        '''
        sql_commands = sql.split(';')
        cursor = cx_Oracle.Cursor(con)
        count = 0
        for sql_command in sql_commands:
            if len(sql_command) > 0:
                count += 1
                if count == 1:
                    # Select from user_sequences to see if GSI_SEQ exists
                    seq_exists = cursor.execute(sql_command)
                    r = seq_exists.fetchall()[0][0] # get count
                elif count == 2:
                    if r > 0:
                        # GSI_SEQ exists, drop GSI_SEQ
                        cursor.execute(sql_command)
                else:
                    # Create GSI_SEQ
                    cursor.execute(sql_command)
                    result = True

    except:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
        logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    finally:
        if cursor is not None:
            cursor.close()
        return result


def spatial_overlay(outFC_lyr, vals, overlay_lyr, target_attribute, update_attribute):
    # outFC_lyr = feature layer being updated
    # overlay_lyr = polygon lyr to overlay outFC_lyr
    # target_attribute = field in overlay_lyr
    # update_attribute = field in outFC_lyr to be updated

    if vals is not None:
        for s in vals:
            s_layer = str(s) + "_lyr"
            arcpy.MakeFeatureLayer_management(overlay_lyr, s_layer, "{0} = '{1}'".format(target_attribute, s))
            # for each overlay_lyr layer, spatial select the points in outFC_lyr, update update_attribute
            arcpy.SelectLayerByLocation_management(outFC_lyr, "WITHIN", s_layer)
            arcpy.CalculateField_management(outFC_lyr, update_attribute, "'{0}'".format(s), "PYTHON")

    else:
        search_cursor = arcpy.da.SearchCursor(overlay_lyr, target_attribute)
        for val in search_cursor:
            cur_layer = str(val) + "_lyr"
            arcpy.MakeFeatureLayer_management(overlay_lyr, cur_layer,
                                              "{0} = '{1}'".format(target_attribute,val[0]))
            # for each overlay_lyr layer, spatial select the points in outFC_lyr, update update_attribute
            arcpy.SelectLayerByLocation_management(outFC_lyr, "WITHIN", cur_layer)
            arcpy.CalculateField_management(outFC_lyr, update_attribute, "'{0}'".format(str(val[0])), "PYTHON")


def clip_features_by_city_limits(inlayer, logFile):
    result = False

    try:
        # This feature class contains a polygon used to clip all features by the Seattle boundary.
        kcgis_schema = "KCGIS"
        city_fc = "CITY"
        city_fc_schema = "{0}.{1}".format(kcgis_schema, city_fc)
        city_fc_path = os.path.join(kcsde, city_fc_schema)

        # Make a selection of features that are within the city limit.
        city_layer = "city_lyr"

        field_name = "CITYNAME"
        seattle = "Seattle"
        city_seattle_query = "{0} = '{1}'".format(field_name, seattle)
        expression = arcpy.AddFieldDelimiters(city_fc_path, city_seattle_query)

        arcpy.MakeFeatureLayer_management(city_fc_path, city_layer, expression)
        message = arcpy.GetMessages()
        logModule.writeLog2(logFile, message, False)

        # Reverse the selection to find features outside of seattle.
        before_feature_count = int(arcpy.GetCount_management(inlayer).getOutput(0))
        arcpy.SelectLayerByLocation_management(inlayer, "WITHIN", city_layer, invert_spatial_relationship="INVERT")
        message = arcpy.GetMessages()
        logModule.writeLog2(logFile, message, False)
        after_feature_count = int(arcpy.GetCount_management(inlayer).getOutput(0))

        # Delete those features.
        if (after_feature_count > 0) and (before_feature_count != after_feature_count):
            arcpy.DeleteFeatures_management(inlayer)
            message = arcpy.GetMessages()
            logModule.writeLog2(logFile, message, False)
        else:
            arcpy.SelectLayerByAttribute_management(inlayer, "CLEAR_SELECTION")

        result = True
    except:
        exception_info = sys.exc_info()[0]
        traceback_info = traceback.format_exc()
        message = "Exception (clip_features_by_city_limits): {0}".format(exception_info)
        logModule.writeExceptionToLogger(logFile, message)
        message = "Traceback: {0}".format(traceback_info)
        logModule.writeExceptionToLogger(logFile, message)
    finally:
        return result


def GSI_SPU_STAGE():
    # start_timestamp = delta_time_system_timer(0)

    def spu_fields_cal(bsw_lyr, s, src_type, iCur, bCur):
        try:
            # GDSP_PROJECT_NAME
            BSL_GSIP_NAME = list([b[0] for b in arcpy.da.SearchCursor(bsw_lyr, "BSL_GSIP_NAME")])[0]
            if src_type in "Engineering Plan Set":
                # check to see if there is name in GSI_PROJECT
                if BSL_GSIP_NAME is not None:
                    GDSP_PROJECT_NAME = BSL_GSIP_NAME
                else:
                    sql = '''
                    SELECT EPS_NAME
                    FROM VVAULT.ENGINEER_PLAN_SET
                    WHERE EPS_DISPLAY_NAME = '{0}'
                    '''.format(s)
                    GDSP_PROJECT_NAME = dww_conn.execute(sql)
            elif src_type in "Permit":
                # Use PERMIT_NUM to look up PRM_SRC_KEY
                PRMT_SRC_KEY = list([b[0] for b in arcpy.da.SearchCursor(bsw_lyr, "BSL_PRMT_SRC_KEY")])[0]
                PIN_ID = list([b[0] for b in arcpy.da.SearchCursor(bsw_lyr, "BSL_PIN_ID")])[0]
                sql = '''
                SELECT USSA.SS_ASBUILT_COMMENT_TEXT
                FROM UTIL.SIDE_SEWER_ASBUILT USSA
                WHERE USSA.SS_ASBUILT_KEY = '{0}'
                AND USSA.SS_ASBUILT_COMMENT_TEXT IS NOT NULL
                '''.format(PRMT_SRC_KEY)
                GDSP_PROJECT_NAME = dww_conn.execute(sql)
                if type(GDSP_PROJECT_NAME) is bool:  # use PIN
                    sql = '''
                    SELECT P.address
                    FROM KCGIS.CGDB_PARCEL_SV P
                    WHERE P.pin = '{0}'
                    '''.format(PIN_ID)
                    GDSP_PROJECT_NAME = dww_conn.execute(sql)

                if GDSP_PROJECT_NAME is not None and GDSP_PROJECT_NAME is not True:
                    if GDSP_PROJECT_NAME.upper() in lstSITEADD3:
                        # if address is in SDCI's data, raise error and move onto the next source
                        raise ValueError("Duplicate project name - address {0}".format(GDSP_PROJECT_NAME.upper()))

            elif src_type in "Document":
                sql = '''
                SELECT UD.DOC_NAME
                FROM UTIL.DOCUMENT UD
                WHERE UD.DOC_KEY = '{0}'
                '''.format(s)
                GDSP_PROJECT_NAME = dww_conn.execute(sql)
            elif src_type in "PIN":
                sql = '''
                SELECT P.address, P.taxpayer
                FROM KCGIS.CGDB_PARCEL_SV P
                WHERE P.pin = '{0}'
                '''.format(s)
                project = dww_conn.execute(sql)

                GDSP_PROJECT_NAME = [p[0] if (p[0] != '' and p[0] != ' ') else p[1] for p in project][0]

                if GDSP_PROJECT_NAME is None:
                    GDSP_PROJECT_NAME = "PIN {0}".format(s)
                else:
                    if GDSP_PROJECT_NAME is not True:
                        if GDSP_PROJECT_NAME.upper() in lstSITEADD3:
                            # if address is in SDCI's data, raise error and move onto the next source
                            raise ValueError("Duplicate project name - address {0}".format(GDSP_PROJECT_NAME.upper()))

            # GDSP_PURPOSE_CODE, GDSP_FUNDER_CODE
            BSL_GSIP_KEY = list([b[0] for b in arcpy.da.SearchCursor(bsw_lyr, "BSL_GSIP_KEY")])[0]
            GDSP_FUNDER_CODE = None
            GDSP_PURPOSE_CODE = None
            if BSL_GSIP_KEY is not None:
                GDSP_PURPOSE_CODE = "ART"
                sql = '''
                SELECT GSIP_FUNDER_CODE
                FROM DWW.GSI_PROJECT
                WHERE GSIP_KEY = '{0}'
                '''.format(BSL_GSIP_KEY)
                GDSP_FUNDER_CODE = dww_conn.execute(sql)
                if GDSP_FUNDER_CODE == "SWC":
                    GDSP_FUNDER_CODE = "SPU"

            if GDSP_FUNDER_CODE is None:
                # Get owner(s)
                OWNER = set([p[0] for p in arcpy.da.SearchCursor(bsw_lyr, ["BSL_OWNER_TEXT"])])
                for o in OWNER:
                    if o == "Department of Finance and Administrative Services":
                        o = "Seattle Public Utilities"
                    if GDSP_PURPOSE_CODE is None:
                        if o in ("Private", "Parks and Recreation"):
                            GDSP_PURPOSE_CODE = "FC"
                        elif o in (
                        "Seattle Public Utilities", "King County", "Port of Seattle", "Unknown", "State of Washington"):
                            GDSP_PURPOSE_CODE = "ART"
                        else:
                            GDSP_PURPOSE_CODE = "VL"

                    # GDSP_FUNDER_CODE
                    for k, v in fndrVal:
                        if v in o:
                            GDSP_FUNDER_CODE = k
                            break

            # GDSP_INSTALL_DATE
            ins_dates = set([b for b in arcpy.da.SearchCursor(bsw_lyr, ["BSL_INSTALL_DATE"])])
            # Earliest BSL_INSTALL_DATE from all dates for this source
            lstInstallDates = sorted((d[0] for d in ins_dates if d[0] is not None), reverse=False)
            if len(lstInstallDates) == 0:
                GDSP_INSTALL_DATE = None
            else:
                GDSP_INSTALL_DATE = datetime.datetime.strftime(lstInstallDates[0], "%Y")  # remove date & time

            # GDSP_LAST_INSPCT_DATE
            insp_dates = set([b for b in arcpy.da.SearchCursor(bsw_lyr, "BSL_MXM_LST_MNT_DATE",
                                                               "BSL_MXM_LST_MNT_TYPE LIKE '%INSPECT%'")])
            lstInspDates = sorted((d[0] for d in insp_dates if d[0] is not None), reverse=False)
            if len(lstInspDates) > 0:
                GDSP_LAST_INSPCT_DATE = datetime.datetime.strftime(lstInspDates[0], "%Y-%m-%d")  # remove time
            else:
                GDSP_LAST_INSPCT_DATE = None

            # Create minimum bounding geometry from features and centroid for the source ID
            f = "in_memory\\f"
            mbg = "in_memory\\mbg"
            arcpy.MinimumBoundingGeometry_management(bsw_lyr, mbg, "ENVELOPE", "ALL")
            arcpy.FeatureToPoint_management(mbg, f)  # default - CENTROID

            # Grab geometry of the centroid
            SHAPE = [p[0] for p in arcpy.da.SearchCursor(f, "SHAPE@")][0]

            # Set up other fields
            GDSP_KEY = int(carto_conn.execute(gKeySQL))
            GDSP_DWW_GSIP_KEY = BSL_GSIP_KEY
            GDSP_DPRTMNT_CODE = "SPU"
            arcpy.SelectLayerByLocation_management(bsn_lyr, "CONTAINS", f)
            sCur = [b[0] for b in arcpy.da.SearchCursor(bsn_lyr, "CSOB_KEY")]
            if len(sCur) > 0:
                GDSP_CSO_BSN_KEY = sCur[0]
            else:
                GDSP_CSO_BSN_KEY = None
            GDSP_SRC_ID = s
            GDSP_SRC_TYPE_TEXT = src_type

            # Insert feature into CARTO.GSI_SPU_STAGE_PT
            i = SHAPE, GDSP_KEY, GDSP_DWW_GSIP_KEY, GDSP_PROJECT_NAME, GDSP_DPRTMNT_CODE, GDSP_PURPOSE_CODE, \
                GDSP_FUNDER_CODE, GDSP_INSTALL_DATE, GDSP_LAST_INSPCT_DATE, GDSP_CSO_BSN_KEY, GDSP_SRC_TYPE_TEXT, GDSP_SRC_ID

            iCur.insertRow(i)

            # Fields to be inserted into BMP
            GDSB_GDSP_KEY = GDSP_KEY
            GDSB_KEY = None  # this gets assigned uniformly afterwards
            GDSB_BMP_CODE = None
            GDSB_INFLTRT_SQFT_NBR = 0
            GDSB_DRNG_SQFT_NBR = None

            # Set up BSL cursor
            BSL = [b for b in
                   arcpy.da.SearchCursor(bsw_lyr, ["BSL_FEA_TYPE_TEXT", "BSL_UDRN_FEATURE_KEY", "BSL_GSI_FEATURE_KEY",
                                                   "BSL_OWNER_TEXT"])]

            # Unique BSL_GSI_FEATURE_KEYs for this source
            lstFK = tuple([f[2] for f in BSL]) if len(BSL) > 1 else [f[2] for f in BSL][0]

            plgn = dwwsde + "\\DWW.POLYGON_PLGN_PV"
            plgn_lyr = "plgn_lyr"
            arcpy.MakeFeatureLayer_management(plgn, plgn_lyr, "PLY_DWW_FEATURE_KEY IN {0}".format(lstFK))

            # List of PLY_DWW_FEATURE_KEY from polygon layer
            lstFKmatched = [a[0] for a in arcpy.da.SearchCursor(plgn_lyr, "PLY_DWW_FEATURE_KEY")]

            dictBMP = {}

            # Separate the BMPs by type with same source id
            for ft, u, fkey, o in BSL:
                if ft in ("Infiltrating Bioretention", "Biofiltration / Bioretention") and u is None:
                    if o in "Seattle Public Utilites" or GDSP_FUNDER_CODE == "SPU":
                        GDSB_BMP_CODE = "BIN"
                    else:
                        GDSB_BMP_CODE = "BIO"
                elif ft in (
                "Non-infiltrating Bioretention", "Infiltrating Bioretention", "Biofiltration / Bioretention") and \
                                u is not None:
                    if GDSP_CSO_BSN_KEY is not None:
                        GDSB_BMP_CODE = "BUC"
                    else:
                        GDSB_BMP_CODE = "BUN"
                elif ft in "Biofiltration Swale":
                    if u is None:
                        GDSB_BMP_CODE = "BSW"
                    else:
                        GDSB_BMP_CODE = "BSU"
                else:
                    # Should it plug in the BMP_CODE for the non-specified ones?
                    for k, v in bmpVal:
                        if v == ft:
                            GDSB_BMP_CODE = k
                            break
                # GDSB_INFLTRT_SQFT_NBR
                infltrt_nbr = 0

                if fkey in lstFKmatched:
                    # grab the value from lstFKmatched for area as infltrt_nbr here
                    infltrt_nbr = [a[0] for a in arcpy.da.SearchCursor(plgn_lyr, "PLY_AREA_SQFT_NBR",
                                                                       "PLY_DWW_FEATURE_KEY = {0}".format(fkey))][0]
                else:
                    # select by location will return nothing here
                    arcpy.SelectLayerByAttribute_management(bsw_lyr, "NEW_SELECTION",
                                                            "BSL_GSI_FEATURE_KEY = {0}".format(fkey))
                    arcpy.SelectLayerByLocation_management(plgn_lyr, "INTERSECT", bsw_lyr)
                    count = int(arcpy.GetCount_management(plgn_lyr).getOutput(0))
                    arcpy.SelectLayerByAttribute_management(plgn_lyr, "CLEAR_SELECTION")
                    if count == 0:
                        # Use the SDRN_LENGTH_FT_NBR * 5 as the polygon area
                        infltrt_nbr = [float(g[0]) for g in arcpy.da.SearchCursor(sdrn_lyr, "SDRN_LENGTH_FT_NBR",
                                                                                  "SDRN_FEA_KEY = {0}".format(fkey))][
                                          0] * 5
                    # if count > 0, in poly, but no match in the DWW_FEATURE_KEY, infltrt_nbr remains 0

                if GDSB_BMP_CODE not in dictBMP:
                    # Append GDSB_INFLTRT_SQFT_NBR to GDSB_BMP_CODE (key) in dictBMP
                    dictBMP[GDSB_BMP_CODE] = [infltrt_nbr * 0.25]
                else:
                    dictBMP[GDSB_BMP_CODE].append(infltrt_nbr * 0.25)

            # For each BMP type
            for k, v in dictBMP.items():
                GDSB_BMP_CODE = k
                GDSB_BMP_NBR = len(dictBMP[k])  # if type(dictBMP[k]) is not float else len(infltrt_nbr)
                GDSB_INFLTRT_SQFT_NBR = sum(v) if type(v) is not float else v
                GDSB_MNGD_SQFT_NBR = 0
                GDSB_MNGD_RNF_CBFT_NBR = 0
                GDSB_MNGD_RNF_GLN_NBR = 0

                # Match on BMP_CODE in lstBMPFactor
                for bmp_code, mthd_type, mngd_nbr, aar_nbr, aar_pl_nbr, cft_gln_nbr, _ in lstBMPFactor:
                    if k == bmp_code:
                        if mthd_type in "DIVISION":
                            GDSB_MNGD_SQFT_NBR = GDSB_INFLTRT_SQFT_NBR / mngd_nbr
                        elif mthd_type in "MULTIPLICATION":
                            GDSB_MNGD_SQFT_NBR = GDSB_INFLTRT_SQFT_NBR * mngd_nbr

                        GDSB_MNGD_RNF_CBFT_NBR = GDSB_MNGD_SQFT_NBR * aar_nbr * aar_pl_nbr
                        GDSB_MNGD_RNF_GLN_NBR = GDSB_MNGD_RNF_CBFT_NBR * cft_gln_nbr
                        break

                # Insert feature into CARTO.GSI_SPU_STAGE_BMP
                r = SHAPE, GDSB_KEY, GDSB_GDSP_KEY, GDSB_BMP_CODE, GDSB_BMP_NBR, GDSB_INFLTRT_SQFT_NBR, \
                    GDSB_DRNG_SQFT_NBR, GDSB_MNGD_SQFT_NBR, GDSB_MNGD_RNF_CBFT_NBR, GDSB_MNGD_RNF_GLN_NBR
                bCur.insertRow(r)

        except ValueError as err:
            pass
            #print err

        except:
            e = sys.exc_info()[0]
            logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
            logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    try:
        outFC = "CARTO.GSI_SPU_STAGE_PT"
        sumFC = "CARTO.GSI_SPU_STAGE_BMP"
        srcFC1 = "srcFC1"
        srcFC2 = "srcFC2"

        if arcpy.Exists(outFC):
            arcpy.Copy_management(outFC, srcFC1)
            arcpy.TruncateTable_management(srcFC1)
        else:
            logModule.writeLog2(logFile, "{0} doesn't exist".format(outFC))
            sys.exit()
        if arcpy.Exists(sumFC):
            arcpy.Copy_management(sumFC, srcFC2)
            arcpy.TruncateTable_management(srcFC2)
        else:
            logModule.writeLog2(logFile, "{0} doesn't exist".format(sumFC))
            sys.exit()

        # BIORETENTION_SWALE_LN_PV
        bioswale = dwwsde + "\\DWW.BIORETENTION_SWALE_LN_PV"

        # Clip City of Seattle
        clipped_lyr = "clipped_lyr"
        arcpy.MakeFeatureLayer_management(bioswale, clipped_lyr)
        clip_features_by_city_limits(clipped_lyr, logFile)

        count = int(arcpy.GetCount_management(clipped_lyr).getOutput(0))
        logModule.writeLog2(logFile, "{0} record count after clipping: {1}".format(clipped_lyr, count))

        # Create feature layer from lifecycle C or PC
        bsw_lyr = "bsw_lyr"
        arcpy.MakeFeatureLayer_management(clipped_lyr, bsw_lyr, "BSL_LIFECYCLE_TEXT IN ('Connected','Provisional Connect')")

        # DPR GSI_FACILITIES
        gsi_fac = dprsde + "\\DPR.GSI_FACILITIES"
        gsi_fac_lyr = "gsi_fac_lyr"
        arcpy.MakeFeatureLayer_management(gsi_fac, gsi_fac_lyr)

        # If bsw_lyr overlaps with gsi_fac, select only ones do not overlap
        arcpy.SelectLayerByLocation_management(bsw_lyr, "INTERSECT", gsi_fac_lyr, "", "NEW_SELECTION", "INVERT")

        # Load feature geometries & attributes for creating new geometries
        bFields = ["BSL_PLN_SRC_ID", "BSL_PERMIT_NUM", "BSL_DCMNT_SRC_KEY", "BSL_PIN_ID", "BSL_GSI_FEATURE_KEY",
                   "BSL_DCMNT_NAME"]

        bswCur = sorted(arcpy.da.SearchCursor(bsw_lyr, bFields), reverse=True)

        lstPLAN, lstPRMT, lstDCMT, lstPINa = [],[],[],[]

        # Populate lstPLAN, lstPRMT, lstDCMT, lstPIN
        for i in bswCur:
            BSL_PLN_SRC_ID = i[0]
            BSL_PERMIT_NUM = i[1]
            BSL_DCMNT_SRC_KEY = i[2]
            BSL_PIN_ID = i[3]
            BSL_GSI_FEATURE_KEY = i[4]
            BSL_DCMNT_NAME = i[5][0:3] if i[5] is not None else None
            # Create unique lists for sources
            if BSL_PLN_SRC_ID is not None:
                if BSL_PLN_SRC_ID not in lstPLAN:
                    lstPLAN.append(str(BSL_PLN_SRC_ID))
            elif BSL_PERMIT_NUM is not None:
                if BSL_PERMIT_NUM not in lstPRMT:
                    lstPRMT.append(str(BSL_PERMIT_NUM))
            elif BSL_DCMNT_SRC_KEY is not None:
                if BSL_DCMNT_SRC_KEY not in lstDCMT and BSL_DCMNT_NAME not in ("ETU","DWW"):
                    lstDCMT.append(str(BSL_DCMNT_SRC_KEY))
            elif BSL_PIN_ID is not None:
                if BSL_PIN_ID not in lstPINa:
                    lstPINa.append(str(BSL_PIN_ID))

        del bswCur

        # Create a unique list of PERMIT with Permit as source
        lstPERMIT1 = lstPRMT

        # Create a unique list of PERMITs from SDCI
        lstPERMIT2 = sorted(set([p[9].lstrip() for p in lstID if p[9] is not None])) # lstrip gets rid of extra space

        # Remove PERMIT_NUMs that are in SDCI from lstPERMIT1 - select these PERMIT_NUMs
        lstPERMIT3 = tuple(["{0}".format(v) for v in lstPERMIT1 if v not in lstPERMIT2])

        # Create a unique list of PIN from BSL
        lstPIN1 = set([str(p[0]) for p in arcpy.da.SearchCursor(bsw_lyr, ["BSL_PIN_ID", "BSL_PLN_SRC_ID"]) if (p[0] is not None and p[1] is None)])

        # Create a unique list of PINs from SDCI
        lstPIN2 = sorted(set([str(p[8]) for p in lstID if p[8] is not None]))

        # Remove PINs that are in SDCI from lstPIN1 - select these PINs
        lstPIN3 = tuple(["{0}".format(v) for v in lstPIN1 if v not in lstPIN2])

        # Only select features with PERMIT_NUMs or PINs that have no match in SDCI
        bsw_lyr2 = "bsw_lyr2"
        arcpy.MakeFeatureLayer_management(bsw_lyr, bsw_lyr2, \
                            "((BSL_PERMIT_NUM in {1} OR BSL_PERMIT_NUM IS NULL) AND"
                            "(BSL_PIN_ID in {0} OR BSL_PIN_ID IS NULL)) OR" \
                            "(BSL_PLN_SRC_ID IS NOT NULL)".format(lstPIN3, lstPERMIT3))

        # lstPRMT is list version of lstPERMIT3
        lstPRMT = list(lstPERMIT3)

        # lstPIN remove records that are in SDCI (lstPIN2) from lstPINa
        lstPIN = sorted([x for x in lstPINa if x not in lstPIN2])

        # Open edit session
        # msg = "<<<Opening Editing Session>>>"
        # logModule.writeLog2(logFile, msg)

        edit = arcpy.da.Editor(sde)
        # Edit session is started with an undo/redo stack (first argument)
        # for versioned data (second argument) (For the second argument, use False if editing unversioned data)
        edit.startEditing(True, False)
        edit.startOperation()

        # Open insert cursor into CARTO.GSI_SPU_STAGE_PT
        iFields = ["SHAPE@",
                   "GDSP_KEY",
                   "GDSP_DWW_GSIP_KEY",
                   "GDSP_PROJECT_NAME",
                   "GDSP_DPRTMNT_CODE",
                   "GDSP_PURPOSE_CODE",
                   "GDSP_FUNDER_CODE",
                   "GDSP_INSTALL_DATE",
                   "GDSP_LAST_INSPCT_DATE",
                   "GDSP_CSO_BSN_KEY",
                   "GDSP_SRC_TYPE_TEXT",
                   "GDSP_SRC_ID"]

        oFields = ["SHAPE@",
                   "GDSB_KEY",
                   "GDSB_GDSP_KEY",
                   "GDSB_BMP_CODE",
                   "GDSB_BMP_NBR",
                   "GDSB_INFLTRT_SQFT_NBR",
                   "GDSB_DRNG_SQFT_NBR",
                   "GDSB_MNGD_SQFT_NBR",
                   "GDSB_MNGD_RNF_CBFT_NBR",
                   "GDSB_MNGD_RNF_GLN_NBR"]

        iCur = arcpy.da.InsertCursor(srcFC1, iFields)
        bCur = arcpy.da.InsertCursor(srcFC2, oFields)

        # Unique list of sources
        lstSources = [lstPLAN, lstPRMT, lstDCMT, lstPIN]

        # Go through each of the 4 source types
        for source in lstSources:
            # For each source, select features with the same source ID
            for s in sorted(set(source)):
                # s = source id, the attribute to query for
                if source == lstSources[0]:
                    arcpy.SelectLayerByAttribute_management(bsw_lyr2, "NEW_SELECTION",
                                                            "{0} = '{1}'".format("BSL_PLN_SRC_ID", s))
                    src_type = "Engineering Plan Set"

                elif source == lstSources[1]:
                    arcpy.SelectLayerByAttribute_management(bsw_lyr2, "NEW_SELECTION",
                                                            "{0} = '{1}'".format("BSL_PERMIT_NUM", s))
                    src_type = "Permit"

                elif source == lstSources[2]:
                    arcpy.SelectLayerByAttribute_management(bsw_lyr2, "NEW_SELECTION",
                                                            "{0} = '{1}'".format("BSL_DCMNT_SRC_KEY", s))
                    src_type = "Document"

                elif source == lstSources[3]:
                    arcpy.SelectLayerByAttribute_management(bsw_lyr2, "NEW_SELECTION",
                                                            "{0} = '{1}'".format("BSL_PIN_ID", s))
                    src_type = "PIN"

                # Count the number of features for each source id
                count = int(arcpy.GetCount_management(bsw_lyr2).getOutput(0))

                if count > 0:
                    #logModule.writeLog2(logFile, "Processing {0} {1}, {2} feature(s)".format(src_type, s, count))
                    # Populate fields & insert into srcFC1
                    spu_fields_cal(bsw_lyr2, s, src_type, iCur, bCur)

        # Stop the edit operation
        edit.stopOperation()

        # Stop the edit session and save the changes
        edit.stopEditing(True)

        # msg = "<<<Closing Editing Session>>>"
        # logModule.writeLog2(logFile, msg)

        del iCur, bCur

        # Update GDSB_KEY
        uCur = arcpy.da.UpdateCursor(srcFC2, "GDSB_KEY", "", "", "", (None, "ORDER BY GDSB_GDSP_KEY"))
        for row in uCur:
            row[0] = int(carto_conn.execute(gKeySQL))
            uCur.updateRow(row)

        del uCur

        # Create feature layer from GSI_SPU_STAGE_PT
        srcFC1_lyr = "srcFC1_lyr"
        arcpy.MakeFeatureLayer_management(srcFC1, srcFC1_lyr)

        # Calculate SCA CODE
        spatial_overlay(srcFC1_lyr, scaVal, sca_lyr, "SCA_CLASS_CODE", "GDSP_SCA_CODE")

        # Calculate Watershed
        spatial_overlay(srcFC1_lyr, None, wtrshd_lyr, "UCWS_FEA_KEY", "GDSP_CRKWS_FEATURE_KEY")

        # Clear selection
        arcpy.SelectLayerByAttribute_management(srcFC1_lyr, "CLEAR_SELECTION")

        # Make sure there are features to load
        count = int(arcpy.GetCount_management(srcFC1_lyr).getOutput(0))

        if count > 0:
            # Truncate/Append CARTO.GSI_SPU_STAGE_PT
            GeoProcModule.truncateAppend2(srcFC1, outFC, logFile)
        else:
            logModule.writeLog2(logFile, "No records to load {0}".format(outFC))

        # Make sure there are features to load
        count = int(arcpy.GetCount_management(srcFC2).getOutput(0))

        if count > 0:
            # Truncate/Append CARTO.GSI_SPU_STAGE_BMP
            GeoProcModule.truncateAppend2(srcFC2, sumFC, logFile)
        else:
            logModule.writeLog2(logFile, "No records to load {0}".format(sumFC))

        # Delete srcFC1, srcFC2
        arcpy.Delete_management(srcFC1)
        arcpy.Delete_management(srcFC2)

    except:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
        logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    # finally:
    #     if start_timestamp is not None:
    #         seconds, minutes, hours = delta_time_system_timer(start_timestamp)
    #         logModule.writeLog2(logFile,
    #                             "{0} completed in {1} hours, {2} minutes, and {3} seconds"
    #                             .format(sys._getframe().f_code.co_name,
    #                                     hours, minutes, seconds))


def GSI_PP_STAGE():
    # start_timestamp = delta_time_system_timer(0)
    def pp_fields_cal(pp_lyr, s, src_type, iCur, bCur):
        try:
            # GPSP_PROJECT_NAME
            PPL_GSIP_NAME = list([b[0] for b in arcpy.da.SearchCursor(pp_lyr, "PPL_GSIP_NAME")])[0]
            if src_type in "Engineering Plan Set":
                # check to see if there is name in GSI_PROJECT
                if PPL_GSIP_NAME is not None:
                    GPSP_PROJECT_NAME = PPL_GSIP_NAME
                else:
                    sql = '''
                    SELECT EPS_NAME
                    FROM VVAULT.ENGINEER_PLAN_SET
                    WHERE EPS_DISPLAY_NAME = '{0}'
                    '''.format(s)
                    GPSP_PROJECT_NAME = dww_conn.execute(sql)
            elif src_type in "Permit":
                # Use PERMIT_NUM to look up PRM_SRC_KEY
                PRMT_SRC_KEY = list([b[0] for b in arcpy.da.SearchCursor(pp_lyr, "PPL_PRMT_SRC_KEY")])[0]
                PIN_ID = list([b[0] for b in arcpy.da.SearchCursor(pp_lyr, "PPL_PIN_ID")])[0]
                sql = '''
                SELECT USSA.SS_ASBUILT_COMMENT_TEXT
                FROM UTIL.SIDE_SEWER_ASBUILT USSA
                WHERE USSA.SS_ASBUILT_KEY = '{0}'
                AND USSA.SS_ASBUILT_COMMENT_TEXT IS NOT NULL
                '''.format(PRMT_SRC_KEY)
                GPSP_PROJECT_NAME = dww_conn.execute(sql)
                if type(GPSP_PROJECT_NAME) is bool:  # use PIN
                    sql = '''
                    SELECT P.address
                    FROM KCGIS.CGDB_PARCEL_SV P
                    WHERE P.pin = '{0}'
                    '''.format(PIN_ID)
                    GPSP_PROJECT_NAME = dww_conn.execute(sql)

                if GPSP_PROJECT_NAME is not None and GPSP_PROJECT_NAME is not True:
                    if GPSP_PROJECT_NAME.upper() in lstSITEADD3:
                        # if address is in SDCI's data, raise error and move onto the next source
                        raise ValueError("Duplicate project name - address {0}".format(GPSP_PROJECT_NAME.upper()))

            elif src_type in "Document":
                sql = '''
                SELECT UD.DOC_NAME
                FROM UTIL.DOCUMENT UD
                WHERE UD.DOC_KEY = '{0}'
                '''.format(s)
                GPSP_PROJECT_NAME = dww_conn.execute(sql)
            elif src_type in "PIN":
                sql = '''
                SELECT P.address, P.taxpayer
                FROM KCGIS.CGDB_PARCEL_SV P
                WHERE P.pin = '{0}'
                '''.format(s)
                project = dww_conn.execute(sql)

                GPSP_PROJECT_NAME = [p[0] if (p[0] != '' and p[0] != ' ') else p[1] for p in project][0]

                if GPSP_PROJECT_NAME is None:
                    GPSP_PROJECT_NAME = "PIN {0}".format(s)
                else:
                    if GPSP_PROJECT_NAME is not True:
                        if GPSP_PROJECT_NAME.upper() in lstSITEADD3:
                            # if address is in SDCI's data, raise error and move onto the next source
                            raise ValueError("Duplicate project name - address {0}".format(GPSP_PROJECT_NAME.upper()))

            # GPSP_PURPOSE_CODE, GPSP_FUNDER_CODE, GPSP_DPRTMNT_CODE
            PPL_GSIP_KEY = list([b[0] for b in arcpy.da.SearchCursor(pp_lyr, "PPL_GSIP_KEY")])[0]
            fkeys = set([b for b in arcpy.da.SearchCursor(pp_lyr, ["PPL_GSI_FEATURE_KEY",
                                                                   "PPL_HANSEN_COMP_KEY"])])
            # Lists of PPL_GSI_FEATURE_KEYs and HANSEN_COMP_KEYs
            lstFK = sorted((d[0] for d in fkeys if d[0] is not None), reverse=True)
            lstHK = sorted((d[1] for d in fkeys if d[1] is not None), reverse=True)

            # GPSP_DPRTMNT_CODE
            GPSP_DPRTMNT_CODE = None
            if len(lstFK + lstHK) == 0:
                pass
            elif len(lstFK) > 0 and len(lstHK) > 0:
                GPSP_DPRTMNT_CODE = "SPU SDT"
            elif len(lstFK) > 0:
                GPSP_DPRTMNT_CODE = "SPU"
            elif len(lstHK) > 0:
                GPSP_DPRTMNT_CODE = "SDT"

            # GPSP_FUNDER_CODE
            GPSP_FUNDER_CODE = None
            GPSP_PURPOSE_CODE = None

            if PPL_GSIP_KEY is not None:
                GPSP_PURPOSE_CODE = "ART"
                sql = '''
                SELECT GSIP_FUNDER_CODE
                FROM DWW.GSI_PROJECT
                WHERE GSIP_KEY = '{0}'
                '''.format(PPL_GSIP_KEY)
                GPSP_FUNDER_CODE = dww_conn.execute(sql)
                if GPSP_FUNDER_CODE == "SWC":
                    GPSP_FUNDER_CODE = "SPU"

            if GPSP_FUNDER_CODE is None:
                # Get owner(s)
                OWNER = set([p[0] for p in arcpy.da.SearchCursor(pp_lyr, ["PPL_OWNER_TEXT"])])
                for o in OWNER:
                    if o == "Department of Finance and Administrative Services":
                        o = "Seattle Public Utilities"

                    if GPSP_PURPOSE_CODE is None:
                        if o in ("Private", "Parks and Recreation"):
                            GPSP_PURPOSE_CODE = "FC"
                        elif o in ("Seattle Public Utilities", "King County", "Port of Seattle", "Unknown",
                                   "State of Washington", "Seattle Department of Transportation", "SDOT", " "):
                            GPSP_PURPOSE_CODE = "ART"
                        else:
                            GPSP_PURPOSE_CODE = "VL"

                    # GPSP_FUNDER_CODE
                    if GPSP_DPRTMNT_CODE == "SPU SDT" or len(lstHK) > 0:
                        GPSP_FUNDER_CODE = "SDT"
                    elif len(lstFK) > 0:
                        for k, v in fndrVal:
                            if v in o:
                                GPSP_FUNDER_CODE = k
                                break

            # GPSP_INSTALL_DATE
            ins_dates = set([b for b in arcpy.da.SearchCursor(pp_lyr, ["PPL_INSTALL_DATE"])])
            # Earliest BSL_INSTALL_DATE from all dates for this source
            lstInstallDates = sorted((d[0] for d in ins_dates if d[0] is not None), reverse=False)
            if len(lstInstallDates) == 0:
                GPSP_INSTALL_DATE = None
            else:
                GPSP_INSTALL_DATE = datetime.datetime.strftime(lstInstallDates[0], "%Y")  # remove date & time

            # GPSP_LAST_INSPCT_DATE
            insp_dates = set([b for b in arcpy.da.SearchCursor(pp_lyr, "PPL_MXM_LST_MNT_DATE",
                                                               "PPL_MXM_LST_MNT_TYPE LIKE '%INSPECT%'")])
            lstInspDates = sorted((d[0] for d in insp_dates if d[0] is not None), reverse=False)
            if len(lstInspDates) > 0:
                GPSP_LAST_INSPCT_DATE = datetime.datetime.strftime(lstInspDates[0], "%Y-%m-%d")  # remove time
            else:
                GPSP_LAST_INSPCT_DATE = None

            # Create minimum bounding geometry from features and centroid for the source ID
            f = "in_memory\\f"
            mbg = "in_memory\\mbg"
            arcpy.MinimumBoundingGeometry_management(pp_lyr, mbg, "ENVELOPE", "ALL")
            arcpy.FeatureToPoint_management(mbg, f)  # default - CENTROID

            # Grab geometry of the centroid
            SHAPE = [p[0] for p in arcpy.da.SearchCursor(f, "SHAPE@")][0]

            # Set up other fields
            GPSP_KEY = int(carto_conn.execute(gKeySQL))
            GPSP_DWW_GSIP_KEY = PPL_GSIP_KEY
            arcpy.SelectLayerByLocation_management(bsn_lyr, "CONTAINS", f)
            sCur = [b[0] for b in arcpy.da.SearchCursor(bsn_lyr, "CSOB_KEY")]
            if len(sCur) > 0:
                GPSP_CSO_BSN_KEY = sCur[0]
            else:
                GPSP_CSO_BSN_KEY = None
            GPSP_SRC_ID = s
            GPSP_SRC_TYPE_TEXT = src_type

            # Insert feature into CARTO.GSI_PP_STAGE_PT
            i = SHAPE, GPSP_KEY, GPSP_DWW_GSIP_KEY, GPSP_PROJECT_NAME, GPSP_DPRTMNT_CODE, GPSP_PURPOSE_CODE, \
                GPSP_FUNDER_CODE, GPSP_INSTALL_DATE, GPSP_LAST_INSPCT_DATE, GPSP_CSO_BSN_KEY, GPSP_SRC_TYPE_TEXT, GPSP_SRC_ID

            iCur.insertRow(i)

            # Fields to be inserted into BMP
            GPSB_GPSP_KEY = GPSP_KEY
            GPSB_KEY = None  # this gets assigned uniformly afterwards
            GPSB_BMP_CODE = None
            GPSB_INFLTRT_SQFT_NBR = 0
            GPSB_DRNG_SQFT_NBR = None

            # Set up PP cursor
            PP = [b for b in arcpy.da.SearchCursor(pp_lyr, ["PPL_FEA_TYPE_TEXT", "PPL_GSI_FEATURE_KEY", "PPL_HANSEN_COMP_KEY"]
                                                   )]

            plgn = dwwsde + "\\DWW.POLYGON_PLGN_PV"
            plgn_lyr = "plgn_lyr"

            if GPSP_DPRTMNT_CODE == "SDT":
                pass
            else:
                if len(lstFK) == 1:
                    arcpy.MakeFeatureLayer_management(plgn, plgn_lyr, "PLY_DWW_FEATURE_KEY IN {0}".format(lstFK[0]))
                else:
                    arcpy.MakeFeatureLayer_management(plgn, plgn_lyr, "PLY_DWW_FEATURE_KEY IN {0}".format(tuple(lstFK)))
                # List of PLY_DWW_FEATURE_KEY from polygon layer
                lstFKmatched = [a[0] for a in arcpy.da.SearchCursor(plgn_lyr, "PLY_DWW_FEATURE_KEY")]

            dictBMP = {}

            # Separate the BMPs by type with same source id
            for ft, fkey, hkey in PP:
                if ft == "FACILITY":
                    GPSB_BMP_CODE = "PPF"
                else:
                    GPSB_BMP_CODE = "PPS"

                # GPSB_INFLTRT_SQFT_NBR
                infltrt_nbr = 0

                if hkey is not None: # SDT line
                    pass
                    # todo: maybe use the PPL length * 6 as the polygon area
                else: # SPU line
                    if fkey in lstFKmatched:
                        # grab the area from matched plgn_lyr for area as infltrt_nbr
                        infltrt_nbr = [a[0] for a in arcpy.da.SearchCursor(plgn_lyr, "PLY_AREA_SQFT_NBR",
                                                                       "PLY_DWW_FEATURE_KEY = {0}".format(fkey))][0]
                        # if this line extends into another polygon but FEAKEY doesn't match...do not count
                    else:
                        #print fkey, "not matched, will use SDRN_LENGTH to estimate"
                        arcpy.SelectLayerByAttribute_management(pp_lyr, "NEW_SELECTION",
                                                                "PPL_GSI_FEATURE_KEY = {0}".format(fkey))
                        arcpy.SelectLayerByLocation_management(plgn_lyr, "INTERSECT", pp_lyr)
                        # count of polygons this line crosses
                        count = int(arcpy.GetCount_management(plgn_lyr).getOutput(0))
                        if count == 0:
                            # Use the SDRN_LENGTH_FT_NBR * 5 as the polygon area
                            infltrt_nbr = [float(g[0]) for g in arcpy.da.SearchCursor(sdrn_lyr, "SDRN_LENGTH_FT_NBR",
                                                                                      "SDRN_FEA_KEY = {0}".format(
                                                                                        fkey))][0] * 5
                        # if count > 0, in poly, but no match in the DWW_FEATURE_KEY, infltrt_nbr remains 0
                    arcpy.SelectLayerByAttribute_management(plgn_lyr, "CLEAR_SELECTION")

                if GPSB_BMP_CODE not in dictBMP:
                    # Append GPSB_INFLTRT_SQFT_NBR to GPSB_BMP_CODE (key) in dictBMP
                    dictBMP[GPSB_BMP_CODE] = [infltrt_nbr]
                else:
                    dictBMP[GPSB_BMP_CODE].append(infltrt_nbr)

            # For each BMP type
            for k, v in dictBMP.items():
                GPSB_BMP_CODE = k
                GPSB_BMP_NBR = len(dictBMP[k])  # if type(dictBMP[k]) is not float else len(infltrt_nbr)
                GPSB_INFLTRT_SQFT_NBR = sum(v) if type(v) is not float else v
                GPSB_MNGD_SQFT_NBR = 0
                GPSB_MNGD_RNF_CBFT_NBR = 0
                GPSB_MNGD_RNF_GLN_NBR = 0
                # Match on BMP_CODE in lstBMPFactor
                for bmp_code, mthd_type, mngd_nbr, aar_nbr, aar_pl_nbr, cft_gln_nbr, _ in lstBMPFactor:
                    if k == bmp_code:
                        if mthd_type in "DIVISION":
                            GPSB_MNGD_SQFT_NBR = GPSB_INFLTRT_SQFT_NBR / mngd_nbr
                        elif mthd_type in "MULTIPLICATION":
                            GPSB_MNGD_SQFT_NBR = GPSB_INFLTRT_SQFT_NBR * mngd_nbr

                        GPSB_MNGD_RNF_CBFT_NBR = GPSB_MNGD_SQFT_NBR * aar_nbr * aar_pl_nbr
                        GPSB_MNGD_RNF_GLN_NBR = GPSB_MNGD_RNF_CBFT_NBR * cft_gln_nbr
                        break

                # Insert feature into CARTO.GSI_PP_STAGE_BMP
                r = SHAPE, GPSB_KEY, GPSB_GPSP_KEY, GPSB_BMP_CODE, GPSB_BMP_NBR, GPSB_INFLTRT_SQFT_NBR, \
                    GPSB_DRNG_SQFT_NBR, GPSB_MNGD_SQFT_NBR, GPSB_MNGD_RNF_CBFT_NBR, GPSB_MNGD_RNF_GLN_NBR
                bCur.insertRow(r)

        except ValueError as err:
            pass
            #print err

        except:
            e = sys.exc_info()[0]
            logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
            logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    try:
        outFC = "CARTO.GSI_PP_STAGE_PT"
        sumFC = "CARTO.GSI_PP_STAGE_BMP"
        srcFC1 = "srcFC1"
        srcFC2 = "srcFC2"

        if arcpy.Exists(outFC):
            arcpy.Copy_management(outFC, srcFC1)
            arcpy.TruncateTable_management(srcFC1)
        else:
            logModule.writeLog2(logFile, "{0} doesn't exist".format(outFC))
            sys.exit()
        if arcpy.Exists(sumFC):
            arcpy.Copy_management(sumFC, srcFC2)
            arcpy.TruncateTable_management(srcFC2)
        else:
            logModule.writeLog2(logFile, "{0} doesn't exist".format(sumFC))
            sys.exit()

        # DWW.PERMEABLE_PAVEMENT_LN_PV
        pp = dwwsde + "\\DWW.PERMEABLE_PAVEMENT_LN_PV"

        # Clip to City of Seattle
        clipped_lyr = "clipped_lyr"
        arcpy.MakeFeatureLayer_management(pp, clipped_lyr)
        clip_features_by_city_limits(clipped_lyr, logFile)

        # Create feature layer from lifecycle C or PC or INSVC
        pp_lyr = "pp_lyr"
        arcpy.MakeFeatureLayer_management(pp, pp_lyr, "PPL_LIFECYCLE_TEXT IN ('Connected','Provisional Connect','INSVC')")

        # DPR GSI_FACILITIES
        gsi_fac = dprsde + "\\DPR.GSI_FACILITIES"
        gsi_fac_lyr = "gsi_fac_lyr"
        arcpy.MakeFeatureLayer_management(gsi_fac, gsi_fac_lyr)

        # if pp_lyr overlaps with gsi_fac, select only ones do not overlap
        arcpy.SelectLayerByLocation_management(pp_lyr, "INTERSECT", gsi_fac_lyr, "", "NEW_SELECTION", "INVERT")

        # Load feature geometries & attributes for creating new geometries
        bFields = ["PPL_PLN_SRC_ID", "PPL_PERMIT_NUM", "PPL_DCMNT_SRC_KEY", "PPL_PIN_ID", "PPL_GSI_FEATURE_KEY",
                   "PPL_HANSEN_COMP_KEY", "PPL_DCMNT_NAME"]

        ppCur = sorted(arcpy.da.SearchCursor(pp_lyr, bFields), reverse=True)
        # count = len(ppCur)
        # logModule.writeLog2(logFile, "{0} features are selected and grouped by source types".format(count))

        lstPLAN, lstPRMT, lstDCMT, lstPINa = [],[],[],[]

        # Populate lstPLAN, lstPRMTa, lstDCMT, lstPIN
        for i in ppCur:
            PPL_PLN_SRC_ID = i[0]
            PPL_PERMIT_NUM = i[1]
            PPL_DCMNT_SRC_KEY = i[2]
            PPL_PIN_ID = i[3]
            PPL_GSI_FEATURE_KEY = i[4]
            PPL_HANSEN_COMP_KEY = i[5]
            PPL_DCMNT_NAME = i[6][0:3] if i[6] is not None else None
            # Create lists for sources
            if PPL_PLN_SRC_ID is not None:
                if PPL_PLN_SRC_ID not in lstPLAN:
                    lstPLAN.append(str(PPL_PLN_SRC_ID))
            elif PPL_PERMIT_NUM is not None:
                if PPL_PERMIT_NUM not in lstPRMT:
                    lstPRMT.append(str(PPL_PERMIT_NUM))
            elif PPL_DCMNT_SRC_KEY is not None:
                if PPL_DCMNT_SRC_KEY not in lstDCMT and PPL_DCMNT_NAME not in ("ETU","DWW"):
                    lstDCMT.append(str(PPL_DCMNT_SRC_KEY))
            elif PPL_PIN_ID is not None:
                if PPL_PIN_ID not in lstPINa:
                    lstPINa.append(str(PPL_PIN_ID))
            elif PPL_GSI_FEATURE_KEY is not None:
                logModule.writeLog2(logFile, "PPL_GSI_FEATURE_KEY {0} does not have a source and will not be part of {1}".
                                    format(PPL_GSI_FEATURE_KEY, outFC))
            elif PPL_HANSEN_COMP_KEY is not None:
                logModule.writeLog2(logFile, "PPL_HANSEN_COMP_KEY {0} does not have a source and will not be part of {1}".
                                    format(PPL_HANSEN_COMP_KEY, outFC))
        del ppCur

        # Create a unique list of PERMIT with Permit as source
        lstPERMIT1 = lstPRMT

        # Create a unique list of PERMITs from SDCI
        lstPERMIT2 = sorted(set([p[9].lstrip() for p in lstID if p[9] is not None])) # lstrip gets rid of extra space

        # Remove PERMIT_NUMs that are in SDCI from lstPERMIT1 - select these PERMIT_NUMs
        lstPERMIT3 = tuple(["{0}".format(v) for v in lstPERMIT1 if v not in lstPERMIT2])

        # Create a unique list of PIN
        lstPIN1 = set([str(p[0]) for p in arcpy.da.SearchCursor(pp_lyr, ["PPL_PIN_ID", "PPL_PLN_SRC_ID"]) if (p[0] is not None and p[1] is None)])

        # Create a unique list of PINs from SDCI
        lstPIN2 = sorted(set([str(p[8]) for p in lstID if p[8] is not None]))

        # Remove PINs that are in DATASTOR.RPTDATA.DV_RPT_SITE_INSTALLED_DRAINAGE
        lstPIN3 = tuple(["{0}".format(v) for v in lstPIN1 if v not in lstPIN2])

        # Only select features with PERMIT_NUMs or PINs that have no match in SDCI
        pp_lyr2 = "pp_lyr2"
        arcpy.MakeFeatureLayer_management(pp_lyr, pp_lyr2), \
                            "((PPL_PERMIT_NUM in {1} OR PPL_PERMIT_NUM IS NULL) AND " \
                            "(PPL_PIN_ID in {0} OR PPL_PIN_ID IS NULL)) OR" \
                            "(PPL_PLN_SRC_ID IS NOT NULL)".format(lstPIN3, lstPERMIT3)

        # lstPRMT is list version of lstPERMIT3
        lstPRMT = list(lstPERMIT3)

        # lstPIN remove records that are in SDCI (lstPIN2) from lstPINa
        lstPIN = sorted([x for x in lstPINa if x not in lstPIN2])

        # Open edit session
        # msg = "<<<Opening Editing Session>>>"
        # logModule.writeLog2(logFile, msg)

        edit = arcpy.da.Editor(sde)
        # Edit session is started with an undo/redo stack (first argument)
        # for versioned data (second argument) (For the second argument, use False if editing unversioned data)
        edit.startEditing(True, False)
        edit.startOperation()

        # Open insert cursor into CARTO.GSI_PP_STAGE_PT
        iFields = ["SHAPE@",
                   "GPSP_KEY",
                   "GPSP_DWW_GSIP_KEY",
                   "GPSP_PROJECT_NAME",
                   "GPSP_DPRTMNT_CODE",
                   "GPSP_PURPOSE_CODE",
                   "GPSP_FUNDER_CODE",
                   "GPSP_INSTALL_DATE",
                   "GPSP_LAST_INSPCT_DATE",
                   "GPSP_CSO_BSN_KEY",
                   "GPSP_SRC_TYPE_TEXT",
                   "GPSP_SRC_ID"]

        oFields = ["SHAPE@",
                   "GPSB_KEY",
                   "GPSB_GPSP_KEY",
                   "GPSB_BMP_CODE",
                   "GPSB_BMP_NBR",
                   "GPSB_INFLTRT_SQFT_NBR",
                   "GPSB_DRNG_SQFT_NBR",
                   "GPSB_MNGD_SQFT_NBR",
                   "GPSB_MNGD_RNF_CBFT_NBR",
                   "GPSB_MNGD_RNF_GLN_NBR"]

        iCur = arcpy.da.InsertCursor(srcFC1, iFields)
        bCur = arcpy.da.InsertCursor(srcFC2, oFields)

        # Unique list of sources
        lstSources = [lstPLAN, lstPRMT, lstDCMT, lstPIN]

        # Go through each of the 4 source types
        for source in lstSources:
            # For each source, select features with the same source ID
            for s in sorted(set(source)):
                # s = source id, the attribute to query for
                if source == lstSources[0]:
                    arcpy.SelectLayerByAttribute_management(pp_lyr2, "NEW_SELECTION",
                                                            "{0} = '{1}'".format("PPL_PLN_SRC_ID", s))
                    src_type = "Engineering Plan Set"

                elif source == lstSources[1]:
                    arcpy.SelectLayerByAttribute_management(pp_lyr2, "NEW_SELECTION",
                                                            "{0} = '{1}'".format("PPL_PERMIT_NUM", s))
                    src_type = "Permit"
                elif source == lstSources[2]:
                    arcpy.SelectLayerByAttribute_management(pp_lyr2, "NEW_SELECTION",
                                                            "{0} = '{1}'".format("PPL_DCMNT_SRC_KEY", s))
                    src_type = "Document"
                elif source == lstSources[3]:
                    arcpy.SelectLayerByAttribute_management(pp_lyr2, "NEW_SELECTION",
                                                            "{0} = '{1}'".format("PPL_PIN_ID", s))
                    src_type = "PIN"

                # Count the number of features for each source id
                count = int(arcpy.GetCount_management(pp_lyr2).getOutput(0))

                if count > 0:
                    #logModule.writeLog2(logFile, "Processing {0} {1}, {2} feature(s)".format(src_type, s, count))
                    # Populate fields & insert into srcFC1
                    pp_fields_cal(pp_lyr2, s, src_type, iCur, bCur) #, lstSITEADD3)
                else:
                    logModule.writeLog2(logFile, "{0} {1} has 0 feature, skipped".format(src_type, s, outFC))

        # Stop the edit operation
        edit.stopOperation()

        # Stop the edit session and save the changes
        edit.stopEditing(True)

        # msg = "<<<Closing Editing Session>>>"
        # logModule.writeLog2(logFile, msg)

        del iCur, bCur

        # Update GPSB_KEY
        uCur = arcpy.da.UpdateCursor(srcFC2, "GPSB_KEY", "", "", "", (None, "ORDER BY GPSB_GPSP_KEY"))
        for row in uCur:
            row[0] = int(carto_conn.execute(gKeySQL))
            uCur.updateRow(row)

        del uCur

        # Create feature layer from GSI_PP_STAGE_PT
        srcFC1_lyr = "srcFC1_lyr"
        arcpy.MakeFeatureLayer_management(srcFC1, srcFC1_lyr)

        # Calculate SCA CODE
        spatial_overlay(srcFC1_lyr, scaVal, sca_lyr, "SCA_CLASS_CODE", "GPSP_SCA_CODE")

        # Calculate Watershed
        spatial_overlay(srcFC1_lyr, None, wtrshd_lyr, "UCWS_FEA_KEY", "GPSP_CRKWS_FEATURE_KEY")

        # Clear selection
        arcpy.SelectLayerByAttribute_management(srcFC1_lyr, "CLEAR_SELECTION")

        # Make sure there are features to load
        count = int(arcpy.GetCount_management(srcFC1_lyr).getOutput(0))

        if count > 0:
            # Truncate/Append CARTO.GSI_PP_STAGE_PT
            GeoProcModule.truncateAppend2(srcFC1, outFC, logFile)
        else:
            logModule.writeLog2(logFile, "No records to load {0}".format(outFC))

        # Make sure there are features to load
        count = int(arcpy.GetCount_management(srcFC2).getOutput(0))

        if count > 0:
            # Truncate/Append CARTO.GSI_PP_STAGE_BMP
            GeoProcModule.truncateAppend2(srcFC2, sumFC, logFile)
        else:
            logModule.writeLog2(logFile, "No records to load {0}".format(sumFC))

        # Delete srcFC1, srcFC2
        arcpy.Delete_management(srcFC1)
        arcpy.Delete_management(srcFC2)

    except:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
        logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    # finally:
    #     if start_timestamp is not None:
    #         seconds, minutes, hours = delta_time_system_timer(start_timestamp)
    #         logModule.writeLog2(logFile,
    #                             "{0} completed in {1} hours, {2} minutes, and {3} seconds"
    #                             .format(sys._getframe().f_code.co_name,
    #                                     hours, minutes, seconds))


def GSI_RW_STAGE():
    # start_timestamp = delta_time_system_timer(0)

    def rw_fields_cal(rwCur, iCur, bCur):
        try:
            # for each record, obtain new sequence key, insert it with the rest of attributes/manipulated attributes
            for rw in rwCur:
                SHAPE = rw[0]
                GRSP_KEY = int(carto_conn.execute(gKeySQL))

                RNWS_DATA_SOURCE_TEXT = rw[1]
                GRSP_DPRTMNT_CODE = "SPU"
                GRSP_PURPOSE_CODE = "RW"
                RNWS_PSTCNST_INSPCTN_DATE = rw[2]
                GRSP_INSTALL_DATE = datetime.datetime.strftime(RNWS_PSTCNST_INSPCTN_DATE, "%Y") \
                    if RNWS_PSTCNST_INSPCTN_DATE is not None else None
                GRSP_LAST_INSPCT_DATE = RNWS_PSTCNST_INSPCTN_DATE
                GRSP_SCA_CODE = None
                RNWS_CSO_BASIN_NAME = rw[3]
                GRSP_CSO_BSN_NAME = RNWS_CSO_BASIN_NAME
                RNWS_PIN_ID = rw[4]
                RNWS_FCLTY_ADRS_TEXT = rw[5]

                if RNWS_PIN_ID is not None:
                    GRSP_SRC_TYPE_TEXT = "PIN"
                    GRSP_SRC_ID = RNWS_PIN_ID
                else:
                    GRSP_SRC_TYPE_TEXT = "Facility Address"
                    GRSP_SRC_ID = RNWS_FCLTY_ADRS_TEXT
                RNWS_DRN_CSTRN_SQFT_NBR = rw[6]
                if RNWS_DRN_CSTRN_SQFT_NBR is None:
                    RNWS_DRN_CSTRN_SQFT_NBR = 0
                RNWS_DRN_RN_GRDN_SQFT_NBR = rw[7]
                if RNWS_DRN_RN_GRDN_SQFT_NBR is None:
                    RNWS_DRN_RN_GRDN_SQFT_NBR = 0
                RNWS_ROOF_DRN_SQFT_NBR = rw[8]
                if RNWS_ROOF_DRN_SQFT_NBR is None:
                    RNWS_ROOF_DRN_SQFT_NBR = 0
                RNWS_RN_GDN_BTM_SQFT_NBR = rw[9]
                if RNWS_RN_GDN_BTM_SQFT_NBR is None:
                    RNWS_RN_GDN_BTM_SQFT_NBR = 0

                if "SPU" in RNWS_DATA_SOURCE_TEXT:
                    GRSP_PROJECT_NAME = "RAINWISE"
                    GRSP_FUNDER_CODE = "SPU"
                    if [x[0] for x in lstGAL if x[0] == RNWS_CSO_BASIN_NAME]:
                        RC_SQFT_GLN_NBR = [float(x[1]) for x in lstGAL if x[0] == RNWS_CSO_BASIN_NAME][0]
                        RC_CNCTVTY_NBR = [float(x[2]) for x in lstGAL if x[0] == RNWS_CSO_BASIN_NAME][0]
                        GRSB_CSO_RDCTN_GLN_NBR = RC_SQFT_GLN_NBR * RC_CNCTVTY_NBR * RNWS_ROOF_DRN_SQFT_NBR
                    else:
                        # no CSO BASIN
                        GRSB_CSO_RDCTN_GLN_NBR = 0
                else:
                    GRSP_PROJECT_NAME = "KING COUNTY RAINWISE"
                    GRSP_FUNDER_CODE = "KC"
                    GRSB_CSO_RDCTN_GLN_NBR = 0
                RNWS_FEA_TYPE = rw[10]
                RNWS_DRN_RGCS_SQFT_NBR = rw[11]
                if RNWS_DRN_RGCS_SQFT_NBR is None:
                    RNWS_DRN_RGCS_SQFT_NBR = 0

                # Insert record into GSI_RW_STAGE_PT
                i = SHAPE, GRSP_KEY, GRSP_PROJECT_NAME, GRSP_DPRTMNT_CODE, GRSP_PURPOSE_CODE, GRSP_FUNDER_CODE, \
                    GRSP_INSTALL_DATE, GRSP_LAST_INSPCT_DATE, GRSP_SCA_CODE, GRSP_CSO_BSN_NAME, GRSP_SRC_TYPE_TEXT, \
                    GRSP_SRC_ID

                iCur.insertRow(i)

                # BMP ###############################################################
                # Fields to be inserted into BMP
                GRSB_GRSP_KEY = GRSP_KEY
                GRSB_KEY = None  # int(carto_conn.execute(gKeySQL))

                # GRSB_BMP_CODE
                GRSB_BMP_CODE = None
                # GRSB_CSO_RDCTN_GLN_NBR - see above
                GRSB_MNGD_SQFT_NBR = 0
                GRSB_MNGD_RNF_CBFT_NBR = 0
                GRSB_MNGD_RNF_GLN_NBR = 0

                # Select featurse with the same RNWS_PIN_ID, separate BMPs by type

                # GRSB_BMP_CODE
                if RNWS_FEA_TYPE in ("Cistern overflowing to Rain Garden", "Rain Garden & Cistern"):
                    GRSB_BMP_CODE = "CRG"
                elif RNWS_FEA_TYPE in ("Rain Garden", "rain garden"):
                    GRSB_BMP_CODE = "RGN"
                else:
                    GRSB_BMP_CODE = "CST"

                # GRSB_CSO_RDCTN_GLN_NBR
                # see above

                # GRSB_MNGD_SQFT_NBR
                GRSB_MNGD_SQFT_NBR = RNWS_ROOF_DRN_SQFT_NBR

                # GRSB_MNGD_RNF_CBFT_NBR
                GRSB_MNGD_RNF_CBFT_NBR = \
                    ((RNWS_DRN_CSTRN_SQFT_NBR * 0.45) + (
                    (RNWS_DRN_RN_GRDN_SQFT_NBR + RNWS_DRN_RGCS_SQFT_NBR) * 0.98)) * 2.1

                # GRSB_MNGD_RNF_GLN_NBR
                GRSB_MNGD_RNF_GLN_NBR = GRSB_MNGD_RNF_CBFT_NBR * 7.48

                # Insert record into GSI_RW_STAGE_BMP
                r = SHAPE, GRSB_KEY, GRSB_GRSP_KEY, GRSB_BMP_CODE, GRSB_CSO_RDCTN_GLN_NBR, GRSB_MNGD_SQFT_NBR, GRSB_MNGD_RNF_CBFT_NBR, \
                    GRSB_MNGD_RNF_GLN_NBR

                bCur.insertRow(r)

        except:
            e = sys.exc_info()[0]
            logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
            logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    try:
        rw = dwwsde + "\\DWW.RAINWISE_PT_PV"

        # Select fields
        fieldInfo = ""
        fieldsToKeep = ["SHAPE","RNWS_DATA_SOURCE_TEXT", "RNWS_PSTCNST_INSPCTN_DATE", "RNWS_CSO_BASIN_NAME",
                        "RNWS_PIN_ID", "RNWS_FCLTY_ADRS_TEXT", "RNWS_DRN_CSTRN_SQFT_NBR", "RNWS_DRN_RN_GRDN_SQFT_NBR",
                        "RNWS_ROOF_DRN_SQFT_NBR", "RNWS_RN_GDN_BTM_SQFT_NBR", "RNWS_FEA_TYPE", "RNWS_DRN_RGCS_SQFT_NBR"]

        fieldList = arcpy.ListFields(rw)

        for field in fieldList:
            f = field.name
            if f in fieldsToKeep:
                fieldInfo = fieldInfo + f + " " + f + " VISIBLE;"
            else:
                fieldInfo = fieldInfo + f + " " + f + " HIDE;"

        # Select features not both RNWS_FEA_TYPE and RNWS_FCLTY_COST_DLR_NBR are null
        temp_lyr = "temp_lyr"
        arcpy.MakeFeatureLayer_management(rw, temp_lyr, "NOT (RNWS_FEA_TYPE IS NULL AND RNWS_FCLTY_COST_DLR_NBR IS NULL)")

        # Start a search cursor to go through each record
        rwCur = arcpy.da.SearchCursor(temp_lyr, fieldsToKeep)

        outFC = "CARTO.GSI_RW_STAGE_PT"
        sumFC = "CARTO.GSI_RW_STAGE_BMP"

        srcFC1 = "srcFC1"
        srcFC2 = "srcFC2"

        if arcpy.Exists(outFC):
            arcpy.Copy_management(outFC, srcFC1)
            arcpy.TruncateTable_management(srcFC1)
        else:
            logModule.writeLog2(logFile, "{0} doesn't exist".format(sumFC))
            sys.exit()
        if arcpy.Exists(sumFC):
            arcpy.Copy_management(sumFC, srcFC2)
            arcpy.TruncateTable_management(srcFC2)
        else:
            logModule.writeLog2(logFile, "{0} doesn't exist".format(sumFC))
            sys.exit()

        # Fields for the insert cursors
        sFields = ["SHAPE@",
                   "GRSP_KEY",
                   "GRSP_PROJECT_NAME",
                   "GRSP_DPRTMNT_CODE",
                   "GRSP_PURPOSE_CODE",
                   "GRSP_FUNDER_CODE",
                   "GRSP_INSTALL_DATE",
                   "GRSP_LAST_INSPCT_DATE",
                   "GRSP_SCA_CODE",
                   "GRSP_CSO_BSN_NAME",
                   "GRSP_SRC_TYPE_TEXT",
                   "GRSP_SRC_ID"]

        oFields = ["SHAPE@",
                   "GRSB_KEY",
                   "GRSB_GRSP_KEY",
                   "GRSB_BMP_CODE",
                   "GRSB_CSO_RDCTN_GLN_NBR",
                   "GRSB_MNGD_SQFT_NBR",
                   "GRSB_MNGD_RNF_CBFT_NBR",
                   "GRSB_MNGD_RNF_GLN_NBR"]

        # Open edit session
        # msg = "<<<Opening Editing Session>>>"
        # logModule.writeLog2(logFile, msg)

        edit = arcpy.da.Editor(sde)
        # Edit session is started with an undo/redo stack (first argument)
        # for versioned data (second argument) (For the second argument, use False if editing unversioned data)
        edit.startEditing(True, False)
        edit.startOperation()

        # Open insert cursors
        iCur = arcpy.da.InsertCursor(srcFC1, sFields)
        bCur = arcpy.da.InsertCursor(srcFC2, oFields)

        # Populate fields
        rw_fields_cal(rwCur, iCur, bCur)

        # Stop the edit operation
        edit.stopOperation()

        # Stop the edit session and save the changes
        edit.stopEditing(True)

        # msg = "<<<Closing Editing Session>>>"
        # logModule.writeLog2(logFile, msg)

        del iCur, bCur, rwCur

        # Update GRSB_KEY
        uCur = arcpy.da.UpdateCursor(srcFC2, "GRSB_KEY", "", "", "", (None, "ORDER BY GRSB_GRSP_KEY"))
        for row in uCur:
            row[0] = int(carto_conn.execute(gKeySQL))
            uCur.updateRow(row)

        del uCur

        # Create feature layer from GSI_RW_STAGE_PT
        srcFC1_lyr = "srcFC1_lyr"
        arcpy.MakeFeatureLayer_management(srcFC1, srcFC1_lyr)

        # Calculate SCA CODE
        spatial_overlay(srcFC1_lyr, scaVal, sca_lyr, "SCA_CLASS_CODE", "GRSP_SCA_CODE")

        # Make sure there are features to load
        count = int(arcpy.GetCount_management(srcFC1).getOutput(0))

        if count > 0:
            # Truncate/Append CARTO.GSI_RW_STAGE_PT
            GeoProcModule.truncateAppend2(srcFC1, outFC, logFile)
        else:
            logModule.writeLog2(logFile, "No records to load {0}".format(outFC))

        # Make sure there are features to load
        count = int(arcpy.GetCount_management(srcFC2).getOutput(0))

        if count > 0:
            # Truncate/Append CARTO.GSI_RW_STAGE_BMP
            GeoProcModule.truncateAppend2(srcFC2, sumFC, logFile)
        else:
            logModule.writeLog2(logFile, "No records to load {0}".format(sumFC))

        # Delete srcFC1, srcFC2
        arcpy.Delete_management(srcFC1)
        arcpy.Delete_management(srcFC2)

    except:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
        logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    # finally:
    #     if start_timestamp is not None:
    #         seconds, minutes, hours = delta_time_system_timer(start_timestamp)
    #         logModule.writeLog2(logFile,
    #                             "{0} completed in {1} hours, {2} minutes, and {3} seconds"
    #                             .format(sys._getframe().f_code.co_name,
    #                                     hours, minutes, seconds))


# CARTO.GSI_SDCI_STAGE_PT and CARTO.GSI_SDCI_STAGE_BMP
def GSI_SDCI_STAGE():
    #global transpo_cpn_dap_lyr, cgdb_lyr

    sdci_stage_pt_schema = "CARTO.GSI_SDCI_STAGE_PT"
    sdci_stage_pt_path = os.path.join(sde, sdci_stage_pt_schema)
    sdci_stage_pt_temp_schema = "{0}_TEMP".format(sdci_stage_pt_schema)
    sdci_stage_pt_temp_path = os.path.join(sde, sdci_stage_pt_temp_schema)
    sdci_stage_pt_fields = ["GCSP_KEY", "GCSP_PROJECT_NAME",
                            "GCSP_DPRTMNT_CODE", "GCSP_PURPOSE_CODE",
                            "GCSP_FUNDER_CODE", "GCSP_INSTALL_DATE",
                            "GCSP_LAST_INSPCT_DATE", "GCSP_SCA_CODE",
                            "GCSP_CSO_BSN_KEY", "GCSP_CRKWS_FEATURE_KEY",
                            "GCSP_SRC_TYPE_TEXT", "GCSP_SRC_ID",
                            "GCSP_TRTMNT_TYPE", "GCSP_FLW_CNTRL_TYPE",
                            "GCSP_DCHRG_PT_TYPE", "SHAPE@"]

    sdci_stage_bmp_schema = "CARTO.GSI_SDCI_STAGE_BMP"
    sdci_stage_bmp_path = os.path.join(sde, sdci_stage_bmp_schema)
    sdci_stage_bmp_temp_schema = "{0}_TEMP".format(sdci_stage_bmp_schema)
    sdci_stage_bmp_temp_path = os.path.join(sde, sdci_stage_bmp_temp_schema)
    sdci_stage_bmp_fields = ["GCSB_KEY", "GCSB_GCSP_KEY", "GCSB_BMP_CODE",
                             "GCSB_BMP_NBR", "GCSB_NR_IMPRVS_SQFT_NBR",
                             "GCSB_MNGD_SQFT_NBR", "GCSB_MNGD_RNF_CBFT_NBR",
                             "GCSB_MNGD_RNF_GLN_NBR", "SHAPE@"]

    # start_timestamp = delta_time_system_timer(0)

    try:
        logModule.writeLog2(logFile, "BEGIN {0} and {1} build".format(sdci_stage_pt_schema, sdci_stage_bmp_schema))

        if arcpy.Exists(sdci_stage_pt_path) and arcpy.Exists(sdci_stage_bmp_path):
            # Create/Delete Temporary Tables
            if not arcpy.Exists(sdci_stage_pt_temp_path):
                arcpy.CreateFeatureclass_management(sde, sdci_stage_pt_temp_schema,
                                                    template=sdci_stage_pt_path)
            else:
                arcpy.TruncateTable_management(sdci_stage_pt_temp_path)
            if not arcpy.Exists(sdci_stage_bmp_temp_path):
                arcpy.CreateFeatureclass_management(sde, sdci_stage_bmp_temp_schema,
                                                    template=sdci_stage_bmp_path)
            else:
                arcpy.TruncateTable_management(sdci_stage_bmp_temp_path)

            stage_pt_dict = {}
            key = 0
            row_count = 0

            # Extrapolate RPTDATA
            for row in lstID:
                gcsp_apno = row[9].strip().lower()
                gcsp_aptype = row[7].strip().upper()
                current_date = row[3]
                if gcsp_aptype == "CONSTRUCTN" and current_date is not None:
                    gcsp_total_gsi = row[6]
                    july_2016 = datetime.datetime(2016, 7, 1)
                    if gcsp_total_gsi is None:
                        gcsp_total_gsi = 0
                    else:
                        gcsp_total_gsi = int(gcsp_total_gsi.strip())
                    if current_date < july_2016 or (current_date > july_2016 and gcsp_total_gsi > 0):
                        row_count += 1
                        gcsp_key = 0
                        gcsp_project_name = gcsp_apno
                        gcsp_dprtmnt_code = "SDCI"
                        gcsp_new_replace_impervious_surface = row[0]
                        gcsp_flow_control_type = row[1].strip().upper()
                        gcsp_treatement_type = row[2].strip().upper()
                        if gcsp_new_replace_impervious_surface is not None:
                            gcsp_new_replace_impervious_surface = int(row[0].strip())
                            if gcsp_new_replace_impervious_surface >= 2000:
                                if "NO CONTROL" in gcsp_flow_control_type or "THROUGH FLOW" in gcsp_flow_control_type:
                                    if "NO TREATMENT" in gcsp_treatement_type:
                                        gcsp_purpose_code = "OSR"
                                    else:
                                        gcsp_purpose_code = "WQO"
                                else:
                                    if "NO TREATMENT" in gcsp_treatement_type:
                                        gcsp_purpose_code = "FCO"
                                    else:
                                        gcsp_purpose_code = "FWO"
                            else:
                                gcsp_purpose_code = "OTH"
                        else:
                            gcsp_purpose_code = "OTH"
                            gcsp_new_replace_impervious_surface = 0
                        gcsp_funder_code = "PRV"
                        gcsp_install_date = current_date
                        gcsp_last_inspct_date = None
                        gcsp_sca_code = None  # Spatial Query
                        gcsp_cso_bsn_key = None  # Spatial overlay
                        gcsp_crkws_feature_key = None  # Spatial Overly
                        gcsp_src_type_text = "SITE ADDRESS"
                        if row[4] is not None:
                            gcsp_src_id = row[4].strip()[:40]
                        else:
                            gcsp_src_id = None
                        gcsp_treatement_type = row[2]
                        gcsp_flow_control_type = row[1]
                        gcsp_dchrg_pt_type = row[5]
                        shape = None
                        pin = row[8]

                        x_coord = None
                        y_coord = None

                        try:
                            url = "http://citygis/gisavs2/api/validatelocation/?location={0}".format(gcsp_src_id)
                            data = urllib.urlopen(url).read()
                            results = json.loads(data)
                            x_coord = results["TOP_MATCH_X"]
                            y_coord = results["TOP_MATCH_Y"]

                            if x_coord is not None and y_coord is not None:
                                point = arcpy.Point(x_coord, y_coord)
                                shape = arcpy.PointGeometry(point, 2926)

                            if shape is None:
                                for dap_geom in transpo_cpn_dap_lyr:
                                    dap_src_id = unicodedata.normalize('NFKD', dap_geom[0]).encode('ascii', 'ignore')
                                    dap_src_id = dap_src_id.strip().lower()[:40]
                                    if gcsp_src_id.lower() == dap_src_id:
                                        shape = dap_geom[1]

                                if shape is None:  # 8 seconds
                                    for parcel_geom in cgdb_lyr:
                                        parcel_pin = unicodedata.normalize('NFKD', parcel_geom[1]) \
                                            .encode('ascii', 'ignore') if parcel_geom[1] is not None else None
                                        parcel_src_id = unicodedata.normalize('NFKD', parcel_geom[0]) \
                                            .encode('ascii', 'ignore') if parcel_geom[0] is not None else None
                                        if ((parcel_pin is not None and pin == parcel_pin.strip().lower()) or
                                            (parcel_src_id is not None and
                                             gcsp_src_id == parcel_src_id.strip().lower())) \
                                                and parcel_geom[2] is not None:
                                            shape = parcel_geom[2].centroid

                        except Exception as e:
                            for dap_geom in transpo_cpn_dap_lyr:
                                if dap_geom[0] is not None:
                                    dap_src_id = unicodedata.normalize('NFKD', dap_geom[0]).encode('ascii', 'ignore')
                                    dap_src_id = dap_src_id.strip().lower()[:40]
                                    if gcsp_src_id.lower() == dap_src_id:
                                        shape = dap_geom[1]

                            if shape is None:  # 8 seconds
                                for parcel_geom in cgdb_lyr:
                                    parcel_pin = unicodedata.normalize('NFKD', parcel_geom[1])\
                                        .encode('ascii', 'ignore') if parcel_geom[1] is not None else None
                                    parcel_src_id = unicodedata.normalize('NFKD', parcel_geom[0])\
                                        .encode('ascii', 'ignore') if parcel_geom[0] is not None else None
                                    if ((parcel_pin is not None and pin == parcel_pin.strip().lower()) or
                                        (parcel_src_id is not None and
                                         gcsp_src_id == parcel_src_id.strip().lower())) \
                                            and parcel_geom[2] is not None:
                                        shape = parcel_geom[2].centroid

                        stage_pt_dict[key] = [gcsp_key,                                 # 0
                                              gcsp_project_name,                        # 1
                                              gcsp_dprtmnt_code,                        # 2
                                              gcsp_purpose_code,                        # 3
                                              gcsp_funder_code,                         # 4
                                              gcsp_install_date,                        # 5
                                              gcsp_last_inspct_date,                    # 6
                                              gcsp_sca_code,                            # 7
                                              gcsp_cso_bsn_key,                         # 8
                                              gcsp_crkws_feature_key,                   # 9
                                              gcsp_src_type_text,                       # 10
                                              gcsp_src_id,                              # 11
                                              gcsp_treatement_type,                     # 12
                                              gcsp_flow_control_type,                   # 13
                                              gcsp_dchrg_pt_type,                       # 14
                                              shape,                                    # 15
                                              gcsp_total_gsi,                           # 16
                                              gcsp_new_replace_impervious_surface]      # 17

                        key += 1

            logModule.writeLog2(logFile, "Row Count: {0}".format(row_count))

            # Group Data by Address
            group_by_address = {"address": []}
            for key in stage_pt_dict.keys():
                gcsp_src_id = stage_pt_dict[key][11]
                gcsp_project_name = stage_pt_dict[key][1]
                gcsp_dprtmnt_code = stage_pt_dict[key][2]
                gcsp_purpose_code = stage_pt_dict[key][3]
                gcsp_funder_code = stage_pt_dict[key][4]
                gcsp_install_date = stage_pt_dict[key][5]
                gcsp_last_inspct_date = stage_pt_dict[key][6]
                gcsp_sca_code = stage_pt_dict[key][7]
                gcsp_cso_bsn_key = stage_pt_dict[key][8]
                gcsp_crkws_feature_key = stage_pt_dict[key][9]
                gcsp_src_type_text = stage_pt_dict[key][10]
                gcsp_treatement_type = stage_pt_dict[key][12]
                gcsp_flow_control_type = stage_pt_dict[key][13]
                gcsp_dchrg_pt_type = stage_pt_dict[key][14]
                shape = stage_pt_dict[key][15]
                gcsp_total_gsi = stage_pt_dict[key][16]
                gcsp_new_replace_impervious_surface = stage_pt_dict[key][17]

                if gcsp_src_id not in group_by_address.keys():
                    gcsp_key = int(carto_conn.execute(gKeySQL))
                    group_by_address[gcsp_src_id] = [gcsp_key, gcsp_project_name, gcsp_dprtmnt_code,
                                                     gcsp_purpose_code, gcsp_funder_code, gcsp_install_date,
                                                     gcsp_last_inspct_date, gcsp_sca_code, gcsp_cso_bsn_key,
                                                     gcsp_crkws_feature_key, gcsp_src_type_text, gcsp_src_id,
                                                     gcsp_treatement_type, gcsp_flow_control_type,
                                                     gcsp_dchrg_pt_type, shape, gcsp_total_gsi,
                                                     gcsp_new_replace_impervious_surface]

                else:
                    grouped_data = group_by_address[gcsp_src_id]
                    current_date = None
                    next_date = None
                    if grouped_data[0] is None:
                        grouped_data[0] = int(carto_conn.execute(gKeySQL))
                    if grouped_data[5] is not None:
                        current_date = grouped_data[5]
                    if stage_pt_dict[key][5] is not None:
                        next_date = stage_pt_dict[key][5]
                    if current_date is None or (next_date is not None and (current_date < next_date)):
                        grouped_data[5] = stage_pt_dict[key][5]
                        grouped_data[1] = stage_pt_dict[key][1]
                        grouped_data[16] = stage_pt_dict[key][16]
                        grouped_data[17] = stage_pt_dict[key][17]
                    if grouped_data[2] is None:
                        grouped_data[2] = stage_pt_dict[key][2]
                    if grouped_data[3] is None:
                        grouped_data[3] = stage_pt_dict[key][3]
                    if grouped_data[4] is None:
                        grouped_data[4] = stage_pt_dict[key][5]
                    if grouped_data[6] is None:
                        grouped_data[6] = stage_pt_dict[key][6]
                    if grouped_data[7] is None:
                        grouped_data[7] = stage_pt_dict[key][7]
                    if grouped_data[8] is None:
                        grouped_data[8] = stage_pt_dict[key][8]
                    if grouped_data[9] is None:
                        grouped_data[9] = stage_pt_dict[key][9]
                    if grouped_data[10] is None:
                        grouped_data[10] = stage_pt_dict[key][10]
                    if grouped_data[11] is None:
                        grouped_data[11] = stage_pt_dict[key][11]
                    if grouped_data[12] is None:
                        grouped_data[12] = stage_pt_dict[key][12]
                    if grouped_data[13] is None:
                        grouped_data[13] = stage_pt_dict[key][13]
                    if grouped_data[14] is None:
                        grouped_data[14] = stage_pt_dict[key][14]
                    if grouped_data[15] is None:
                        grouped_data[15] = stage_pt_dict[key][15]
                    # if grouped_data[16] is None or grouped_data[16] == 0:
                    #     grouped_data[16] = stage_pt_dict[key][16]
                    # if grouped_data[17] is None or grouped_data[17] == 0:
                    #     grouped_data[17] = stage_pt_dict[key][17]

            # Insert grouped data into CARTO.GSI_SDCI_STAGE_PT
            with arcpy.da.InsertCursor(sdci_stage_pt_temp_path, sdci_stage_pt_fields) as pt_insert:
                for key in group_by_address.keys():
                    if key is not "address":
                        gcsp_key = group_by_address[key][0]
                        gcsp_project_name = group_by_address[key][1]
                        gcsp_dprtmnt_code = group_by_address[key][2]
                        gcsp_purpose_code = group_by_address[key][3]
                        gcsp_funder_code = group_by_address[key][4]
                        gcsp_install_date = int(group_by_address[key][5].strftime('%Y'))
                        gcsp_last_inspct_date = group_by_address[key][6]
                        gcsp_sca_code = group_by_address[key][7]
                        gcsp_cso_bsn_key = group_by_address[key][8]
                        gcsp_crkws_feature_key = group_by_address[key][9]
                        gcsp_src_type_text = group_by_address[key][10]
                        gcsp_src_id = group_by_address[key][11]
                        gcsp_treatement_type = group_by_address[key][12]
                        gcsp_flow_control_type = group_by_address[key][13]
                        gcsp_dchrg_pt_type = group_by_address[key][14]
                        shape = group_by_address[key][15]

                        record = gcsp_key, gcsp_project_name, gcsp_dprtmnt_code, \
                            gcsp_purpose_code, gcsp_funder_code, gcsp_install_date, \
                            gcsp_last_inspct_date, gcsp_sca_code, gcsp_cso_bsn_key, \
                            gcsp_crkws_feature_key, gcsp_src_type_text, gcsp_src_id, \
                            gcsp_treatement_type, gcsp_flow_control_type, \
                            gcsp_dchrg_pt_type, shape

                        pt_insert.insertRow(record)

            # Insert grouped data into CARTO.GSI_SDCI_STAGE_BMP
            with arcpy.da.InsertCursor(sdci_stage_bmp_temp_path, sdci_stage_bmp_fields) as bmp_insert:
                for key in group_by_address.keys():
                    if key is not "address":
                        grouped_data = group_by_address[key]
                        gcsb_key = int(carto_conn.execute(gKeySQL))
                        gcsb_gcsp_key = grouped_data[0]
                        gcsb_bmp_code = None
                        gcsb_bmp_nbr = None
                        gcsb_nr_imprvs_sqft_nbr = int(round(grouped_data[17]))
                        gcsb_mngd_sqft_nbr = None
                        gcsb_mngd_rnf_cbft = None
                        july_2016 = datetime.datetime(2016, 7, 1)
                        if group_by_address[key][5] is not None:
                            current_date = grouped_data[5]
                            if current_date < july_2016:
                                gcsb_mngd_gln_nbr = int(round(.24 * float(grouped_data[16])))
                            else:
                                gcsb_mngd_gln_nbr = int(round(grouped_data[16]))
                        else:
                            gcsb_mngd_gln_nbr = int(round(grouped_data[16]))
                        shape = grouped_data[15]

                        record = gcsb_key, gcsb_gcsp_key, gcsb_bmp_code, gcsb_bmp_nbr, gcsb_nr_imprvs_sqft_nbr, \
                            gcsb_mngd_sqft_nbr, gcsb_mngd_rnf_cbft, gcsb_mngd_gln_nbr, shape

                        bmp_insert.insertRow(record)

            # Create layer representation of STAGE_PT
            stage_pt_temp = "stage_pt_temp_sdci"
            arcpy.MakeFeatureLayer_management(sdci_stage_pt_temp_path, stage_pt_temp)

            # Spatial Overlay
            spatial_overlay(stage_pt_temp, scaVal, sca_lyr, "SCA_CLASS_CODE", "GCSP_SCA_CODE")
            spatial_overlay(stage_pt_temp, None, bsn_lyr, "CSOB_KEY", "GCSP_CSO_BSN_KEY")
            spatial_overlay(stage_pt_temp, None, wtrshd_lyr, "UCWS_FEA_KEY", "GCSP_CRKWS_FEATURE_KEY")

            # Truncate/Append Base Feature Class
            arcpy.TruncateTable_management(sdci_stage_pt_path)
            arcpy.Append_management(sdci_stage_pt_temp_path, sdci_stage_pt_path)

            # Truncate/Append Base Feature Class
            arcpy.TruncateTable_management(sdci_stage_bmp_path)
            arcpy.Append_management(sdci_stage_bmp_temp_path, sdci_stage_bmp_path)

            # Delete Temp Feature Classes
            arcpy.Delete_management(sdci_stage_pt_temp_path)
            arcpy.Delete_management(sdci_stage_bmp_temp_path)

        else:
            raise EnvironmentError("SDCI Base Tables Don't Exist.")

    except Exception as e:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: {0}'.format(str(e)))
        logModule.writeExceptionToLogger(logFile, ' Traceback: {0}'.format(traceback.format_exc()))

    finally:
        # if start_timestamp is not None:
        #     seconds, minutes, hours = delta_time_system_timer(start_timestamp)
        #     logModule.writeLog2(logFile,
        #                         "{0} Completed in {1} hours, {2} minutes, and {3} seconds."
        #                         .format(sys._getframe().f_code.co_name,
        #                                 hours,
        #                                 minutes,
        #                                 seconds))
        if arcpy.Exists(sdci_stage_pt_temp_path):
            arcpy.Delete_management(sdci_stage_pt_temp_path)
        if arcpy.Exists(sdci_stage_bmp_temp_path):
            arcpy.Delete_management(sdci_stage_bmp_temp_path)
        # if transpo_cpn_dap_lyr is not None and type(transpo_cpn_dap_lyr) is not list:
        #     transpo_cpn_dap_lyr.close()
        # if cgdb_lyr is not None and type(transpo_cpn_dap_lyr) is not list:
        #     cgdb_lyr.close()


# CARTO.GSI_SDOT_STAGE_PT and CARTO.GSI_SDOT_STAGE_BMP
def GSI_SDOT_STAGE():

    # Helper for CARTO.GSI_SDOT_STAGE_PT
    # Ingests COMMETNS field and looks for SIP Number
    def sdot_check_for_sip_in_comments(comments):
        if comments is not None and "SIP" in comments and '#' in comments:
            comments = unicodedata.normalize('NFKD', comments).encode('ascii', 'ignore')
            return "SIP {0}".format(comments[(comments.index('#') + 1):(comments.index('#') + 7)].strip())
        else:
            return "SDOT TREE"

    # Helper for CARTO.GSI_SDOT_STAGE_PT
    # Ingests FUNDING_SOURCE and GREEN_FACTOR and returns PURPOSE_CODE
    def sdot_purpose_code(codereq, funding_source, green_factor):
        if funding_source == 'SPU' or funding_source == 'SDT':
            return "ART"
        elif codereq == 'Y' and \
                (funding_source is None or
                 len(funding_source) < 1 or
                 funding_source == 'PRV' or
                 funding_source == 'UNK' or
                 funding_source == 'OTH'):
            return "FC"
        elif codereq == 'N' and \
                green_factor == 'Y' and \
                (funding_source is None or
                 len(funding_source) < 1 or
                 funding_source == 'PRV' or
                 funding_source == 'UNK' or
                 funding_source == 'OTH'):
            return "SGF"
        elif codereq == 'N' and \
                green_factor == 'N' and \
                (funding_source is None or
                 len(funding_source) < 1 or
                 funding_source == 'PRV' or
                 funding_source == 'UNK' or
                 funding_source == 'OTH'):
            return "OTH"
        else:
            return ""

    v_trees_schema = "SDOT.V_TREES"
    v_trees_path = os.path.join(sdotsde, v_trees_schema)
    v_trees_fields = ["ASBUILTPLANNO", "COMMENTS", "CODEREQ",
                      "FUNDING_SOURCE", "GREEN_FACTOR",
                      "PLANTED_DATE", "LAST_VERIFY_DATE",
                      "UNITDESC", "SHAPE@", "OWNERSHIP"]

    sdot_trees_stage_pt_schema = "CARTO.GSI_SDOT_STAGE_PT"
    sdot_trees_stage_pt_path = os.path.join(sde, sdot_trees_stage_pt_schema)
    sdot_trees_stage_pt_temp_schema = "{0}_TEMP".format(sdot_trees_stage_pt_schema)
    sdot_trees_stage_pt_temp_path = os.path.join(sde, sdot_trees_stage_pt_temp_schema)
    sdot_tree_stage_pt_fields = ["GSSP_KEY", "GSSP_PROJECT_NAME",
                                 "GSSP_DPRTMNT_CODE", "GSSP_PURPOSE_CODE",
                                 "GSSP_FUNDER_CODE", "GSSP_INSTALL_DATE",
                                 "GSSP_LAST_INSPCT_DATE", "GSSP_SCA_CODE",
                                 "GSSP_CSO_BSN_KEY", "GSSP_CRKWS_FEATURE_KEY",
                                 "GSSP_SRC_TYPE_TEXT", "GSSP_SRC_ID", "SHAPE@"]

    sdot_trees_stage_bmp_schema = "CARTO.GSI_SDOT_STAGE_BMP"
    sdot_trees_stage_bmp_path = os.path.join(sde, sdot_trees_stage_bmp_schema)
    sdot_trees_stage_bmp_temp_schema = "{0}_TEMP".format(sdot_trees_stage_bmp_schema)
    sdot_trees_stage_bmp_temp_path = os.path.join(sde, sdot_trees_stage_bmp_temp_schema)
    sdot_trees_stage_bmp_fields = ["GSSB_KEY", "GSSB_GSSP_KEY",
                                   "GSSB_BMP_CODE", "GSSB_BMP_NBR",
                                   "GSSB_MNGD_SQFT_NBR", "GSSB_MNGD_RNF_CBFT_NBR",
                                   "GSSB_MNGD_RNF_GLN_NBR", "SHAPE@"]

    # start_timestamp = delta_time_system_timer(0)

    try:
        logModule.writeLog2(logFile, "BEGIN {0} and {1} build".format(sdot_trees_stage_pt_schema,
                                                                      sdot_trees_stage_bmp_schema))

        if arcpy.Exists(sdot_trees_stage_pt_path) and arcpy.Exists(sdot_trees_stage_bmp_path):
            count = int(arcpy.GetCount_management(v_trees_path).getOutput(0))
            logModule.writeLog2(logFile, "Row Count: {0}".format(count))

            # Create/Delete Temporary Tables
            if not arcpy.Exists(sdot_trees_stage_pt_temp_path):
                arcpy.CreateFeatureclass_management(sde, sdot_trees_stage_pt_temp_schema,
                                                    template=sdot_trees_stage_pt_path)
            else:
                arcpy.TruncateTable_management(sdot_trees_stage_pt_temp_path)
            if not arcpy.Exists(sdot_trees_stage_bmp_temp_path):
                arcpy.CreateFeatureclass_management(sde, sdot_trees_stage_bmp_temp_schema,
                                                    template=sdot_trees_stage_bmp_path)
            else:
                arcpy.TruncateTable_management(sdot_trees_stage_bmp_temp_path)

            stage_pt_dict = {}
            key = 0

            # Access data from SDOT.V_TREES
            with arcpy.da.SearchCursor(v_trees_path,
                                       v_trees_fields,
                                       where_clause="GSI = 'Y' AND CURRENT_STATUS = 'INSVC'") as tree_search:
                for row in tree_search:
                    gssp_key = 0
                    if row[0] is None:
                        gssp_project_name = sdot_check_for_sip_in_comments(row[1])
                    else:
                        gssp_project_name = row[0]
                    gssp_dprtmnt_code = "SDOT"
                    gssp_codereq = unicodedata.normalize('NFKD', row[2]).encode('ascii', 'ignore').strip().upper()
                    gssp_funding_source = unicodedata.normalize('NFKD', row[3]).encode('ascii', 'ignore').strip()\
                        .upper()
                    gssp_green_factor = unicodedata.normalize('NFKD', row[4]).encode('ascii', 'ignore').strip().upper()
                    ownership = unicodedata.normalize('NFKD', row[9]).encode('ascii', 'ignore').strip().upper()
                    if gssp_funding_source is not None and gssp_funding_source != "" and gssp_funding_source != "UTRP":
                        gssp_funder_code = gssp_funding_source[:3]
                    else:
                        if ownership is not None:
                            if ownership == "SDOT":
                                gssp_funder_code = "SDT"
                            elif ownership == "PRIV":
                                gssp_funder_code = "PRV"
                            elif ownership == "OTHER":
                                gssp_funder_code = "OTH"
                            elif ownership == "SPU":
                                gssp_funder_code = "SPU"
                            else:
                                gssp_funder_code = "UNK"
                        else:
                            gssp_funder_code = "UNK"
                    gssp_src_id = unicodedata.normalize('NFKD', row[7]).encode('ascii', 'ignore').strip()[:40]
                    gssp_purpose_code = sdot_purpose_code(gssp_codereq, gssp_funder_code, gssp_green_factor)
                    gssp_install_date = row[5].strftime('%Y')
                    gssp_last_inspct_date = row[6]
                    gssp_sca_code = None  # Spatial Query
                    gssp_cso_bsn_key = None  # Spatial overlay
                    gssp_crkws_feature_key = None  # Spatial Overly
                    gssp_src_type_text = "Tree Address"
                    shape = row[8]
                    if gssp_green_factor == 'Y':
                        green_factor_count = 1
                    else:
                        green_factor_count = -1
                    if gssp_codereq == 'Y':
                        codereq_count = 1
                    else:
                        codereq_count = -1

                    stage_pt_dict[key] = [gssp_key, gssp_project_name,
                                          gssp_dprtmnt_code, gssp_purpose_code,
                                          gssp_funder_code, gssp_install_date,
                                          gssp_last_inspct_date, gssp_sca_code,
                                          gssp_cso_bsn_key, gssp_crkws_feature_key,
                                          gssp_src_type_text, gssp_src_id, shape,
                                          green_factor_count, codereq_count,
                                          gssp_green_factor, gssp_codereq]
                    key += 1

            # Group data by Address per Year
            bmp_dict = {}
            group_by_address = {"address": {"year": []}}
            for key in stage_pt_dict.keys():
                gssp_project_name = stage_pt_dict[key][1]
                gssp_dprtmnt_code = stage_pt_dict[key][2]
                gssp_purpose_code = stage_pt_dict[key][3]
                gssp_funder_code = stage_pt_dict[key][4]
                gssp_install_date = stage_pt_dict[key][5]
                gssp_last_inspct_date = stage_pt_dict[key][6]
                gssp_sca_code = stage_pt_dict[key][7]
                gssp_cso_bsn_key = stage_pt_dict[key][8]
                gssp_crkws_feature_key = stage_pt_dict[key][9]
                gssp_src_type_text = stage_pt_dict[key][10]
                gssp_src_id = stage_pt_dict[key][11]
                shape = stage_pt_dict[key][12]
                green_factor_count = stage_pt_dict[key][13]
                codereq_count = stage_pt_dict[key][14]
                gssp_green_factor = stage_pt_dict[key][15]
                gssp_codereq = stage_pt_dict[key][16]

                if gssp_src_id not in group_by_address.keys():
                    gssp_key = int(carto_conn.execute(gKeySQL))
                    group_by_address[gssp_src_id] = {}
                    group_by_address[gssp_src_id][gssp_install_date] = [gssp_key, gssp_project_name,
                                                                        gssp_dprtmnt_code, gssp_purpose_code,
                                                                        gssp_funder_code, gssp_install_date,
                                                                        gssp_last_inspct_date, gssp_sca_code,
                                                                        gssp_cso_bsn_key, gssp_crkws_feature_key,
                                                                        gssp_src_type_text, gssp_src_id, shape,
                                                                        green_factor_count, codereq_count]

                elif gssp_install_date not in group_by_address[gssp_src_id].keys():
                    gssp_key = int(carto_conn.execute(gKeySQL))
                    group_by_address[gssp_src_id][gssp_install_date] = [gssp_key, gssp_project_name,
                                                                        gssp_dprtmnt_code, gssp_purpose_code,
                                                                        gssp_funder_code, gssp_install_date,
                                                                        gssp_last_inspct_date, gssp_sca_code,
                                                                        gssp_cso_bsn_key, gssp_crkws_feature_key,
                                                                        gssp_src_type_text, gssp_src_id, shape,
                                                                        green_factor_count, codereq_count]

                else:
                    grouped_data = group_by_address[gssp_src_id][gssp_install_date]
                    if grouped_data[0] is None or grouped_data[0] == 0:
                        grouped_data[0] = int(carto_conn.execute(gKeySQL))
                    if grouped_data[1] is None or grouped_data[1] == "SDOT TREE":
                        grouped_data[1] = gssp_project_name
                    if grouped_data[2] is None:
                        grouped_data[2] = gssp_dprtmnt_code
                    if grouped_data[3] is None:
                        grouped_data[3] = gssp_purpose_code
                    if grouped_data[4] is None:
                        grouped_data[4] = gssp_funder_code
                    if grouped_data[5] is None:
                        grouped_data[5] = gssp_install_date
                    if grouped_data[6] is None:
                        grouped_data[6] = gssp_last_inspct_date
                    if grouped_data[7] is None:
                        grouped_data[7] = gssp_sca_code
                    if grouped_data[8] is None:
                        grouped_data[8] = gssp_cso_bsn_key
                    if grouped_data[9] is None:
                        grouped_data[9] = gssp_crkws_feature_key
                    if grouped_data[10] is None:
                        grouped_data[10] = gssp_src_type_text
                    if grouped_data[11] is None:
                        grouped_data[11] = gssp_src_id
                    if grouped_data[12] is None:
                        grouped_data[12] = shape
                    grouped_data[13] += green_factor_count
                    grouped_data[14] += codereq_count
                    if grouped_data[13] > 0:
                        gssp_green_factor = "Y"
                    elif grouped_data[13] < 0:
                        gssp_green_factor = "N"
                    if grouped_data[14] > 0:
                        gssp_codereq = "Y"
                    elif grouped_data[14] < 0:
                        gssp_codereq = "N"
                    grouped_data[3] = sdot_purpose_code(gssp_codereq, gssp_funder_code, gssp_green_factor)

                if gssp_src_id in bmp_dict.keys():
                    bmp_dict[gssp_src_id].append(gssp_install_date)
                else:
                    bmp_dict[gssp_src_id] = [gssp_install_date]

            # Insert grouped data into CARTO.GSI_SDOT_STAGE_PT
            with arcpy.da.InsertCursor(sdot_trees_stage_pt_temp_path, sdot_tree_stage_pt_fields) as pt_insert:
                for key in group_by_address.keys():
                    if key is not "address":
                        for year_key in group_by_address[key].keys():
                            grouped_pt_data = group_by_address[key][year_key]
                            gssp_key = grouped_pt_data[0]
                            gssp_project_name = grouped_pt_data[1]
                            gssp_dprtmnt_code = grouped_pt_data[2]
                            gssp_purpose_code = grouped_pt_data[3]
                            gssp_funder_code = grouped_pt_data[4]
                            gssp_install_date = int(year_key)
                            gssp_last_inspct_date = grouped_pt_data[6]
                            gssp_sca_code = grouped_pt_data[7]  # Spatial Overlay Values
                            gssp_cso_bsn_key = grouped_pt_data[8]  # Spatial Overlay Values
                            gssp_crkws_feature_key = grouped_pt_data[9]  # Spatial Overlay Values
                            gssp_src_type_text = grouped_pt_data[10]
                            gssp_src_id = grouped_pt_data[11]
                            shape = grouped_pt_data[12]

                            record = gssp_key, gssp_project_name, gssp_dprtmnt_code, gssp_purpose_code, \
                                gssp_funder_code, gssp_install_date, gssp_last_inspct_date, gssp_sca_code, \
                                gssp_cso_bsn_key, gssp_crkws_feature_key, gssp_src_type_text, gssp_src_id, shape

                            pt_insert.insertRow(record)

            # Insert grouped data into CARTO.GSI_SDOT_STAGE_BMP
            with arcpy.da.InsertCursor(sdot_trees_stage_bmp_temp_path, sdot_trees_stage_bmp_fields) as bmp_insert:
                for key in group_by_address.keys():
                    if key is not "address":
                        for year_key in group_by_address[key].keys():
                            grouped_bmp_data = group_by_address[key][year_key]
                            src_id = grouped_bmp_data[11]
                            year = grouped_bmp_data[5]
                            bmp_count = 0
                            for year_value in bmp_dict[src_id]:
                                if year_value == year:
                                    bmp_count += 1
                            gssb_key = int(carto_conn.execute(gKeySQL))
                            gssb_gsp_key = grouped_bmp_data[0]
                            gssb_bmp_code = 'DCD'  # DCD from CARTO.GSI_BMP_CODE
                            gssb_bmp_nbr = bmp_count
                            gssb_mngd_sqft_nbr = 20 * bmp_count
                            gssb_mngd_rnf_cbft_nbr = gssb_mngd_sqft_nbr * 2.1
                            gssb_mngd_rnf_gln_nbr = gssb_mngd_rnf_cbft_nbr * 7.48
                            shape = grouped_bmp_data[12]

                            record = gssb_key, gssb_gsp_key, gssb_bmp_code, gssb_bmp_nbr, gssb_mngd_sqft_nbr, \
                                gssb_mngd_rnf_cbft_nbr, gssb_mngd_rnf_gln_nbr, shape

                            bmp_insert.insertRow(record)

            # Create layer representation of STAGE_PT
            stage_pt_temp = "stage_pt_temp_sdot_trees"
            arcpy.MakeFeatureLayer_management(sdot_trees_stage_pt_temp_path, stage_pt_temp)

            # Spatial Overlay
            spatial_overlay(stage_pt_temp, scaVal, sca_lyr, "SCA_CLASS_CODE", "GSSP_SCA_CODE")
            spatial_overlay(stage_pt_temp, None, bsn_lyr, "CSOB_KEY", "GSSP_CSO_BSN_KEY")
            spatial_overlay(stage_pt_temp, None, wtrshd_lyr, "UCWS_FEA_KEY", "GSSP_CRKWS_FEATURE_KEY")

            # Truncate/Append Base Feature Class
            arcpy.TruncateTable_management(sdot_trees_stage_pt_path)
            arcpy.Append_management(sdot_trees_stage_pt_temp_path, sdot_trees_stage_pt_path)

            # Truncate/Append Base Feature Class
            arcpy.TruncateTable_management(sdot_trees_stage_bmp_path)
            arcpy.Append_management(sdot_trees_stage_bmp_temp_path, sdot_trees_stage_bmp_path)

        else:
            raise EnvironmentError("SDOT Base Tables Don't Exist.")

    except Exception as e:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: {0}'.format(str(e)))
        logModule.writeExceptionToLogger(logFile, ' Traceback: {0}'.format(traceback.format_exc()))

    finally:
        # if start_timestamp is not None:
        #     seconds, minutes, hours = delta_time_system_timer(start_timestamp)
        #     logModule.writeLog2(logFile,
        #                         "{0} Completed in {1} hours, {2} minutes, and {3} seconds."
        #                         .format(sys._getframe().f_code.co_name,
        #                                 hours,
        #                                 minutes,
        #                                 seconds))
        if arcpy.Exists(sdot_trees_stage_pt_temp_path):
            arcpy.Delete_management(sdot_trees_stage_pt_temp_path)
        if arcpy.Exists(sdot_trees_stage_bmp_temp_path):
            arcpy.Delete_management(sdot_trees_stage_bmp_temp_path)


# CARTO.GSI_DPRT_STAGE_PT and CARTO.GSI_DPRT_STAGE_BMP
def GSI_DPRT_STAGE():
    dpr_trees_schema = "DPR.GSI_Facilities\DPR.GSI_Trees_PT"
    dpr_trees_path = os.path.join(dprsde, dpr_trees_schema)
    dpr_trees_fields = ["SRC_PLAN", "GSI_CD_DRVN", "GSI_INSTALL_DATE",
                        "PARK_NAME", "SHAPE@", "GSI_FEAT_TYPE", "GSI_MTGTD_SQFT_NBR",
                        "FEAT_TYPE_SQFT_BASIS", "FEAT_TYPE_SF", "STMWTR_CF_MGD"]

    dpr_trees_stage_pt_schema = "CARTO.GSI_DPRT_STAGE_PT"
    dpr_trees_stage_pt_path = os.path.join(sde, dpr_trees_stage_pt_schema)
    dpr_trees_stage_pt_temp_schema = "{0}_TEMP".format(dpr_trees_stage_pt_schema)
    dpr_trees_stage_pt_temp_path = os.path.join(sde, dpr_trees_stage_pt_temp_schema)
    dpr_tree_stage_pt_fields = ["GTSP_KEY", "GTSP_PROJECT_NAME",
                                "GTSP_DPRTMNT_CODE", "GTSP_PURPOSE_CODE",
                                "GTSP_FUNDER_CODE", "GTSP_INSTALL_DATE",
                                "GTSP_LAST_INSPCT_DATE", "GTSP_SCA_CODE",
                                "GTSP_CSO_BSN_KEY", "GTSP_CRKWS_FEATURE_KEY",
                                "GTSP_SRC_TYPE_TEXT", "GTSP_SRC_ID", "SHAPE@"]

    dpr_trees_stage_bmp_schema = "CARTO.GSI_DPRT_STAGE_BMP"
    dpr_trees_stage_bmp_path = os.path.join(sde, dpr_trees_stage_bmp_schema)
    dpr_trees_stage_bmp_temp_schema = "{0}_TEMP".format(dpr_trees_stage_bmp_schema)
    dpr_trees_stage_bmp_temp_path = os.path.join(sde, dpr_trees_stage_bmp_temp_schema)
    dpr_trees_stage_bmp_fields = ["GTSB_KEY", "GTSB_GTSP_KEY",
                                  "GTSB_BMP_CODE", "GTSB_BMP_NBR",
                                  "GTSB_MNGD_SQFT_NBR", "GTSB_MNGD_RNF_CBFT_NBR",
                                  "GTSB_MNGD_RNF_GLN_NBR", "SHAPE@"]

    # start_timestamp = delta_time_system_timer(0)

    try:
        logModule.writeLog2(logFile, "BEGIN {0} and {1} build".format(dpr_trees_stage_pt_schema,
                                                                      dpr_trees_stage_bmp_schema))

        if arcpy.Exists(dpr_trees_stage_pt_path) and arcpy.Exists(dpr_trees_stage_bmp_path):
            count = int(arcpy.GetCount_management(dpr_trees_path).getOutput(0))
            logModule.writeLog2(logFile, "Row Count: {0}".format(count))

            # Create/Delete Temporary Tables
            if not arcpy.Exists(dpr_trees_stage_pt_temp_path):
                arcpy.CreateFeatureclass_management(sde, dpr_trees_stage_pt_temp_schema,
                                                    template=dpr_trees_stage_pt_path)
            else:
                arcpy.TruncateTable_management(dpr_trees_stage_pt_temp_path)
            if not arcpy.Exists(dpr_trees_stage_bmp_temp_path):
                arcpy.CreateFeatureclass_management(sde, dpr_trees_stage_bmp_temp_schema,
                                                    template=dpr_trees_stage_bmp_path)
            else:
                arcpy.TruncateTable_management(dpr_trees_stage_bmp_temp_path)

            stage_pt_dict = {}
            key = 0

            # Access Data from DPR.GSI_Facilities\DPR.GSI_Trees_PT
            with arcpy.da.SearchCursor(dpr_trees_path, dpr_trees_fields) as tree_search:
                for row in tree_search:
                    gtsp_key = 0
                    gtsp_project_name = row[0]
                    gtsp_dprtmnt_code = "DPR"
                    if 'Y' in row[1]:
                        gtsp_purpose_code = "FC"
                    else:
                        gtsp_purpose_code = "VL"
                    gtsp_funder_code = "DPR"
                    if row[2] is not None:
                        # gtsp_install_date = datetime.datetime.strptime(row[2], '%Y').year
                        gtsp_install_date = row[2]
                    else:
                        gtsp_install_date = row[0][:4]
                    gtsp_last_inspct_date = None  # Planted Date?
                    gtsp_sca_code = None  # Spatial Query
                    gtsp_cso_bsn_key = None  # Spatial overlay
                    gtsp_crkws_feature_key = None  # Spatial Overly
                    gtsp_src_type_text = "PARK"
                    if row[3] is not None:
                        gtsp_src_id = unicodedata.normalize('NFKD', row[3]).encode('ascii', 'ignore').strip()[:40]
                    else:
                        gtsp_src_id = None
                    shape = row[4]
                    feat_type_gsi = row[5].strip().lower()
                    mtgtd_sqft_nbr = row[6]
                    sqft_basis = row[7]
                    feat_type_sf = row[8]
                    stmwtr_cf_mgd = row[9]
                    gsi_fea_type_count = []

                    stage_pt_dict[key] = [gtsp_key,                 # 0
                                          gtsp_project_name,        # 1
                                          gtsp_dprtmnt_code,        # 2
                                          gtsp_purpose_code,        # 3
                                          gtsp_funder_code,         # 4
                                          gtsp_install_date,        # 5
                                          gtsp_last_inspct_date,    # 6
                                          gtsp_sca_code,            # 7
                                          gtsp_cso_bsn_key,         # 8
                                          gtsp_crkws_feature_key,   # 9
                                          gtsp_src_type_text,       # 10
                                          gtsp_src_id,              # 11
                                          shape,                    # 12
                                          feat_type_gsi,            # 13
                                          mtgtd_sqft_nbr,           # 14
                                          sqft_basis,               # 15
                                          feat_type_sf,             # 16
                                          stmwtr_cf_mgd]            # 17
                    key += 1

            # Group data by Address per Year
            group_by_address = {"address": {"year": []}}
            for key in stage_pt_dict.keys():
                gtsp_project_name = stage_pt_dict[key][1]
                gtsp_dprtmnt_code = stage_pt_dict[key][2]
                gtsp_purpose_code = stage_pt_dict[key][3]
                gtsp_funder_code = stage_pt_dict[key][4]
                gtsp_install_date = stage_pt_dict[key][5]
                gtsp_last_inspct_date = stage_pt_dict[key][6]
                gtsp_sca_code = stage_pt_dict[key][7]
                gtsp_cso_bsn_key = stage_pt_dict[key][8]
                gtsp_crkws_feature_key = stage_pt_dict[key][9]
                gtsp_src_type_text = stage_pt_dict[key][10]
                gtsp_src_id = stage_pt_dict[key][11]
                shape = stage_pt_dict[key][12]
                feat_type_gsi = stage_pt_dict[key][13]
                mtgtd_sqft_nbr = stage_pt_dict[key][14]
                sqft_basis = stage_pt_dict[key][15]
                feat_type_sf = stage_pt_dict[key][16]
                stmwtr_cf_mgd = stage_pt_dict[key][17]
                if gtsp_src_id not in group_by_address.keys():
                    gtsp_key = int(carto_conn.execute(gKeySQL))
                    group_by_address[gtsp_src_id] = {}
                    group_by_address[gtsp_src_id][gtsp_install_date] = [gtsp_key, gtsp_project_name, gtsp_dprtmnt_code,
                                                                        gtsp_purpose_code, gtsp_funder_code,
                                                                        gtsp_install_date, gtsp_last_inspct_date,
                                                                        gtsp_sca_code, gtsp_cso_bsn_key,
                                                                        gtsp_crkws_feature_key, gtsp_src_type_text,
                                                                        gtsp_src_id, shape, feat_type_gsi,
                                                                        mtgtd_sqft_nbr, sqft_basis, feat_type_sf,
                                                                        stmwtr_cf_mgd]

                elif gtsp_install_date not in group_by_address[gtsp_src_id].keys():
                    gtsp_key = int(carto_conn.execute(gKeySQL))
                    group_by_address[gtsp_src_id][gtsp_install_date] = [gtsp_key, gtsp_project_name, gtsp_dprtmnt_code,
                                                                        gtsp_purpose_code, gtsp_funder_code,
                                                                        gtsp_install_date, gtsp_last_inspct_date,
                                                                        gtsp_sca_code, gtsp_cso_bsn_key,
                                                                        gtsp_crkws_feature_key, gtsp_src_type_text,
                                                                        gtsp_src_id, shape, feat_type_gsi,
                                                                        mtgtd_sqft_nbr, sqft_basis, feat_type_sf,
                                                                        stmwtr_cf_mgd]

                else:
                    grouped_data = group_by_address[gtsp_src_id][gtsp_install_date]
                    if grouped_data[0] is None or grouped_data[0] is 0:
                        grouped_data[0] = int(carto_conn.execute(gKeySQL))  # gtsp_key
                    if grouped_data[1] is None:
                        grouped_data[1] = stage_pt_dict[key][1]  # gtsp_project_name
                    if grouped_data[2] is None:
                        grouped_data[2] = stage_pt_dict[key][2]  # gtsp_dprtmnt_code
                    if grouped_data[3] is None:
                        grouped_data[3] = stage_pt_dict[key][3]  # gtsp_purpose_code
                    if grouped_data[4] is None:
                        grouped_data[4] = stage_pt_dict[key][4]  # gtsp_funder_code
                    if grouped_data[5] is None:
                        grouped_data[5] = stage_pt_dict[key][5]  # gtsp_install_date
                    if grouped_data[6] is None:
                        grouped_data[6] = stage_pt_dict[key][6]  # gtsp_last_inspct_date
                    if grouped_data[7] is None:
                        grouped_data[7] = stage_pt_dict[key][7]  # gtsp_sca_code
                    if grouped_data[8] is None:
                        grouped_data[8] = stage_pt_dict[key][8]  # gtsp_cso_bsn_key
                    if grouped_data[9] is None:
                        grouped_data[9] = stage_pt_dict[key][9]  # gtsp_crkws_feature_key
                    if grouped_data[10] is None:
                        grouped_data[10] = stage_pt_dict[key][10]  # gtsp_src_type_text
                    if grouped_data[11] is None:
                        grouped_data[11] = stage_pt_dict[key][11]  # gtsp_src_id
                    if grouped_data[12] is None:
                        grouped_data[12] = stage_pt_dict[key][12]  # shape
                    if grouped_data[13] is None:
                        grouped_data[13] = stage_pt_dict[key][13]  # feat_type_gsi
                    if grouped_data[14] is None:
                        grouped_data[14] = stage_pt_dict[key][14]  # mtgtd_sqft_nbr
                    if grouped_data[15] is None:
                        grouped_data[15] = stage_pt_dict[key][15]  # sqft_basis
                    if grouped_data[16] is None:
                        grouped_data[16] = stage_pt_dict[key][16]  # feat_type_sf
                    if grouped_data[17] is None:
                        grouped_data[17] = stage_pt_dict[key][17]  # stmwtr_cf_mgd

            # Insert Data into CARTO.GSI_DPRT_STAGE_PT
            with arcpy.da.InsertCursor(dpr_trees_stage_pt_temp_path, dpr_tree_stage_pt_fields) as pt_insert:
                for key in group_by_address.keys():
                    if key is not "address":
                        for year_key in group_by_address[key].keys():
                            current_data = group_by_address[key][year_key]
                            gtsp_key = current_data[0]
                            gtsp_project_name = current_data[1]
                            gtsp_dprtmnt_code = current_data[2]
                            gtsp_purpose_code = current_data[3]
                            gtsp_funder_code = current_data[4]
                            gtsp_install_date = current_data[5]
                            gtsp_last_inspct_date = current_data[6]
                            gtsp_sca_code = current_data[7]  # Spatial Overlay Values
                            gtsp_cso_bsn_key = current_data[8]  # Spatial Overlay Values
                            gtsp_crkws_feature_key = current_data[9]  # Spatial Overlay Values
                            gtsp_src_type_text = current_data[10]
                            gtsp_src_id = current_data[11]
                            shape = current_data[12]

                            record = gtsp_key, \
                                gtsp_project_name, \
                                gtsp_dprtmnt_code, \
                                gtsp_purpose_code, \
                                gtsp_funder_code, \
                                gtsp_install_date, \
                                gtsp_last_inspct_date, \
                                gtsp_sca_code, \
                                gtsp_cso_bsn_key, \
                                gtsp_crkws_feature_key, \
                                gtsp_src_type_text, \
                                gtsp_src_id, \
                                shape

                            pt_insert.insertRow(record)

            group_by_address_by_fea_type = {"address": {"year": {"feat_type": []}}}
            for key in stage_pt_dict.keys():
                gtsp_project_name = stage_pt_dict[key][1]
                gtsp_dprtmnt_code = stage_pt_dict[key][2]
                gtsp_purpose_code = stage_pt_dict[key][3]
                gtsp_funder_code = stage_pt_dict[key][4]
                gtsp_install_date = stage_pt_dict[key][5]
                gtsp_lst_inspct_date = stage_pt_dict[key][6]
                gtsp_sca_code = stage_pt_dict[key][7]
                gtsp_cso_bsn_key = stage_pt_dict[key][8]
                gtsp_crkws_feat_key = stage_pt_dict[key][9]
                gtsp_src_type_text = stage_pt_dict[key][10]
                gtsp_src_id = stage_pt_dict[key][11]
                shape = stage_pt_dict[key][12]
                feat_type_gsi = stage_pt_dict[key][13]
                mtgtd_sqft_nbr = stage_pt_dict[key][14]
                sqft_basis = stage_pt_dict[key][15]
                feat_type_sf = stage_pt_dict[key][16]
                stmwtr_cf_mgd = stage_pt_dict[key][17]
                bmp_count = 1

                if gtsp_src_id not in group_by_address_by_fea_type.keys():
                    gtsp_key = int(carto_conn.execute(gKeySQL))
                    group_by_address_by_fea_type[gtsp_src_id] = {}
                    group_by_address_by_fea_type[gtsp_src_id][gtsp_install_date] = {}
                    group_by_address_by_fea_type[gtsp_src_id][gtsp_install_date][feat_type_gsi] = [gtsp_key,
                                                                                                   gtsp_project_name,
                                                                                                   gtsp_dprtmnt_code,
                                                                                                   gtsp_purpose_code,
                                                                                                   gtsp_funder_code,
                                                                                                   gtsp_install_date,
                                                                                                   gtsp_lst_inspct_date,
                                                                                                   gtsp_sca_code,
                                                                                                   gtsp_cso_bsn_key,
                                                                                                   gtsp_crkws_feat_key,
                                                                                                   gtsp_src_type_text,
                                                                                                   gtsp_src_id, shape,
                                                                                                   feat_type_gsi,
                                                                                                   mtgtd_sqft_nbr,
                                                                                                   sqft_basis,
                                                                                                   feat_type_sf,
                                                                                                   stmwtr_cf_mgd,
                                                                                                   bmp_count]
                elif gtsp_install_date not in group_by_address_by_fea_type[gtsp_src_id].keys():
                    gtsp_key = int(carto_conn.execute(gKeySQL))
                    group_by_address_by_fea_type[gtsp_src_id][gtsp_install_date] = {}
                    group_by_address_by_fea_type[gtsp_src_id][gtsp_install_date][feat_type_gsi] = [gtsp_key,
                                                                                                   gtsp_project_name,
                                                                                                   gtsp_dprtmnt_code,
                                                                                                   gtsp_purpose_code,
                                                                                                   gtsp_funder_code,
                                                                                                   gtsp_install_date,
                                                                                                   gtsp_lst_inspct_date,
                                                                                                   gtsp_sca_code,
                                                                                                   gtsp_cso_bsn_key,
                                                                                                   gtsp_crkws_feat_key,
                                                                                                   gtsp_src_type_text,
                                                                                                   gtsp_src_id, shape,
                                                                                                   feat_type_gsi,
                                                                                                   mtgtd_sqft_nbr,
                                                                                                   sqft_basis,
                                                                                                   feat_type_sf,
                                                                                                   stmwtr_cf_mgd,
                                                                                                   bmp_count]
                elif feat_type_gsi not in group_by_address_by_fea_type[gtsp_src_id][gtsp_install_date].keys():
                    gtsp_key = int(carto_conn.execute(gKeySQL))
                    group_by_address_by_fea_type[gtsp_src_id][gtsp_install_date][feat_type_gsi] = [gtsp_key,
                                                                                                   gtsp_project_name,
                                                                                                   gtsp_dprtmnt_code,
                                                                                                   gtsp_purpose_code,
                                                                                                   gtsp_funder_code,
                                                                                                   gtsp_install_date,
                                                                                                   gtsp_lst_inspct_date,
                                                                                                   gtsp_sca_code,
                                                                                                   gtsp_cso_bsn_key,
                                                                                                   gtsp_crkws_feat_key,
                                                                                                   gtsp_src_type_text,
                                                                                                   gtsp_src_id, shape,
                                                                                                   feat_type_gsi,
                                                                                                   mtgtd_sqft_nbr,
                                                                                                   sqft_basis,
                                                                                                   feat_type_sf,
                                                                                                   stmwtr_cf_mgd,
                                                                                                   bmp_count]
                else:
                    grouped_data = group_by_address_by_fea_type[gtsp_src_id][gtsp_install_date][feat_type_gsi]
                    if grouped_data[0] is None or grouped_data[0] is 0:
                        grouped_data[0] = int(carto_conn.execute(gKeySQL))  # gtsp_key
                    if grouped_data[1] is None:
                        grouped_data[1] = stage_pt_dict[key][1]  # gtsp_project_name
                    if grouped_data[2] is None:
                        grouped_data[2] = stage_pt_dict[key][2]  # gtsp_dprtmnt_code
                    if grouped_data[3] is None:
                        grouped_data[3] = stage_pt_dict[key][3]  # gtsp_purpose_code
                    if grouped_data[4] is None:
                        grouped_data[4] = stage_pt_dict[key][4]  # gtsp_funder_code
                    if grouped_data[5] is None:
                        grouped_data[5] = stage_pt_dict[key][5]  # gtsp_install_date
                    if grouped_data[6] is None:
                        grouped_data[6] = stage_pt_dict[key][6]  # gtsp_last_inspct_date
                    if grouped_data[7] is None:
                        grouped_data[7] = stage_pt_dict[key][7]  # gtsp_sca_code
                    if grouped_data[8] is None:
                        grouped_data[8] = stage_pt_dict[key][8]  # gtsp_cso_bsn_key
                    if grouped_data[9] is None:
                        grouped_data[9] = stage_pt_dict[key][9]  # gtsp_crkws_feature_key
                    if grouped_data[10] is None:
                        grouped_data[10] = stage_pt_dict[key][10]  # gtsp_src_type_text
                    if grouped_data[11] is None:
                        grouped_data[11] = stage_pt_dict[key][11]  # gtsp_src_id
                    if grouped_data[12] is None:
                        grouped_data[12] = stage_pt_dict[key][12]  # shape
                    if grouped_data[13] is None:
                        grouped_data[13] = stage_pt_dict[key][13]  # feat_type_gsi
                    if grouped_data[14] is None:
                        grouped_data[14] = stage_pt_dict[key][14]  # mtgtd_sqft_nbr
                    if grouped_data[15] is None:
                        grouped_data[15] = stage_pt_dict[key][15]  # sqft_basis
                    if grouped_data[16] is None:
                        grouped_data[16] = stage_pt_dict[key][16]  # feat_type_sf
                    if grouped_data[17] is None:
                        grouped_data[17] = stage_pt_dict[key][17]  # stmwtr_cf_mgd
                    grouped_data[18] += 1

            # Insert Data into CARTO.GSI_DPRT_STAGE_BMP
            with arcpy.da.InsertCursor(dpr_trees_stage_bmp_temp_path, dpr_trees_stage_bmp_fields) as bmp_insert:
                for key in group_by_address_by_fea_type.keys():
                    if key is not "address":
                        for year_key in group_by_address_by_fea_type[key].keys():
                            for bmp_type in group_by_address_by_fea_type[key][year_key].keys():
                                current_data = group_by_address_by_fea_type[key][year_key][bmp_type]
                                gtsb_gssp_key = group_by_address[key][year_key][0]
                                shape = current_data[12]
                                gtsb_key = current_data[0]
                                gtsb_bmp_nbr = current_data[18]
                                if 'evergreen' in bmp_type:
                                    gtsb_bmp_code = "EVR"
                                else:
                                    gtsb_bmp_code = "DCD"
                                gtsb_mngd_sqft_nbr = int(round(gtsb_bmp_nbr * current_data[16]))
                                result = 0  # gtsb_mngd_rnf_cbft
                                for bmp in lstBMPFactor:
                                    if gtsb_bmp_code.lower() in bmp[0].lower():
                                        result = gtsb_mngd_sqft_nbr * bmp[3] * bmp[4]
                                gtsb_mngd_rnf_cbft = int(round(result))
                                result = 0  # gtsb_mngd_gln_nbr
                                for bmp in lstBMPFactor:
                                    if gtsb_bmp_code.lower() in bmp[0].lower():
                                        result = gtsb_mngd_rnf_cbft * bmp[5]
                                gtsb_mngd_gln_nbr = int(round(result))

                                record = gtsb_key, gtsb_gssp_key, gtsb_bmp_code, gtsb_bmp_nbr, gtsb_mngd_sqft_nbr, \
                                    gtsb_mngd_rnf_cbft, gtsb_mngd_gln_nbr, shape

                                bmp_insert.insertRow(record)

            # Create layer representation of STAGE_PT
            stage_pt_temp = "stage_pt_temp_dpr_trees"
            arcpy.MakeFeatureLayer_management(dpr_trees_stage_pt_temp_path, stage_pt_temp)

            # Spatial Overlay
            spatial_overlay(stage_pt_temp, scaVal, sca_lyr, "SCA_CLASS_CODE", "GTSP_SCA_CODE")
            spatial_overlay(stage_pt_temp, None, bsn_lyr, "CSOB_KEY", "GTSP_CSO_BSN_KEY")
            spatial_overlay(stage_pt_temp, None, wtrshd_lyr, "UCWS_FEA_KEY", "GTSP_CRKWS_FEATURE_KEY")

            # Truncate/Append Base Feature Class
            arcpy.TruncateTable_management(dpr_trees_stage_pt_path)
            arcpy.Append_management(dpr_trees_stage_pt_temp_path, dpr_trees_stage_pt_path)

            # Truncate/Append Base Feature Class
            arcpy.TruncateTable_management(dpr_trees_stage_bmp_path)
            arcpy.Append_management(dpr_trees_stage_bmp_temp_path, dpr_trees_stage_bmp_path)

        else:
            raise EnvironmentError("DPR Tree Base Tables Don't Exist.")

    except Exception as e:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: {0}'.format(str(e)))
        logModule.writeExceptionToLogger(logFile, ' Traceback: {0}'.format(traceback.format_exc()))

    finally:
        # if start_timestamp is not None:
        #     seconds, minutes, hours = delta_time_system_timer(start_timestamp)
        #     logModule.writeLog2(logFile,
        #                         "{0} Completed in {1} hours, {2} minutes, and {3} seconds."
        #                         .format(sys._getframe().f_code.co_name,
        #                                 hours,
        #                                 minutes,
        #                                 seconds))
        if arcpy.Exists(dpr_trees_stage_pt_temp_path):
            arcpy.Delete_management(dpr_trees_stage_pt_temp_path)
        if arcpy.Exists(dpr_trees_stage_bmp_temp_path):
            arcpy.Delete_management(dpr_trees_stage_bmp_temp_path)


# CARTO.GSI_DPRF_STAGE_PT and CARTO.GSI_DPRF_STAGE_BMP
def GSI_DPRF_STAGE():
    dpr_facilities_schema = "DPR.GSI_Facilities\DPR.GSI_Facilities"
    dpr_facilities_path = os.path.join(dprsde, dpr_facilities_schema)
    dpr_facilities_fields = ["SRC_PLAN", "GSI_CD_DRVN", "SW_FUNCT",
                             "GSI_INSTALL_DATE", "PARK_NAME", "SHAPE@",
                             "GSI_FEAT_TYPE", "GIS_AREA", "FEAT_TYPE_SQFT_BASIS",
                             "STMWTR_CF_MGD", "GSI_MTGTD_SQFT_NBR"]

    dpr_facilities_stage_pt_schema = "CARTO.GSI_DPRF_STAGE_PT"
    dpr_facilities_stage_pt_path = os.path.join(sde, dpr_facilities_stage_pt_schema)
    dpr_facilities_stage_pt_temp_schema = "{0}_TEMP".format(dpr_facilities_stage_pt_schema)
    dpr_facilities_stage_pt_temp_path = os.path.join(sde, dpr_facilities_stage_pt_temp_schema)
    dpr_facilities_stage_pt_fields = ["GFSP_KEY", "GFSP_PROJECT_NAME",
                                      "GFSP_DPRTMNT_CODE", "GFSP_PURPOSE_CODE",
                                      "GFSP_FUNDER_CODE", "GFSP_INSTALL_DATE",
                                      "GFSP_LAST_INSPCT_DATE", "GFSP_SCA_CODE",
                                      "GFSP_CSO_BSN_KEY", "GFSP_CRKWS_FEATURE_KEY",
                                      "GFSP_SRC_TYPE_TEXT", "GFSP_SRC_ID", "SHAPE@"]

    dpr_facilities_stage_bmp_schema = "CARTO.GSI_DPRF_STAGE_BMP"
    dpr_facilities_stage_bmp_path = os.path.join(sde, dpr_facilities_stage_bmp_schema)
    dpr_facilities_stage_bmp_temp_schema = "{0}_TEMP".format(dpr_facilities_stage_bmp_schema)
    dpr_facilities_stage_bmp_temp_path = os.path.join(sde, dpr_facilities_stage_bmp_temp_schema)
    dpr_facilities_stage_bmp_fields = ["GFSB_KEY", "GFSB_GFSP_KEY",
                                       "GFSB_BMP_CODE", "GFSB_BMP_NBR",
                                       "GFSB_INFLTRT_SQFT_NBR", "GFSB_DRNG_SQFT_NBR",
                                       "GFSB_MNGD_SQFT_NBR", "GFSB_MNGD_RNF_CBFT_NBR",
                                       "GFSB_MNGD_RNF_GLN_NBR", "SHAPE@"]

    # start_timestamp = delta_time_system_timer(0)

    try:
        logModule.writeLog2(logFile, "BEGIN {0} and {1} build".format(dpr_facilities_stage_pt_schema,
                                                                      dpr_facilities_stage_bmp_schema))

        if arcpy.Exists(dpr_facilities_stage_pt_path) and arcpy.Exists(dpr_facilities_stage_bmp_path):
            count = int(arcpy.GetCount_management(dpr_facilities_path).getOutput(0))
            logModule.writeLog2(logFile, "Row Count: {0}".format(count))

            # Create/Delete Temporary Tables
            if not arcpy.Exists(dpr_facilities_stage_pt_temp_path):
                arcpy.CreateFeatureclass_management(sde, dpr_facilities_stage_pt_temp_schema,
                                                    template=dpr_facilities_stage_pt_path)
            else:
                arcpy.TruncateTable_management(dpr_facilities_stage_pt_temp_path)
            if not arcpy.Exists(dpr_facilities_stage_bmp_temp_path):
                arcpy.CreateFeatureclass_management(sde, dpr_facilities_stage_bmp_temp_schema,
                                                    template=dpr_facilities_stage_bmp_path)
            else:
                arcpy.TruncateTable_management(dpr_facilities_stage_bmp_temp_path)

            stage_pt_dict = {}
            key = 0

            # Access Data from DPR.GSI_Facilities\DPR.GSI_Facilities
            with arcpy.da.SearchCursor(dpr_facilities_path, dpr_facilities_fields) as facilities_search:
                for row in facilities_search:
                    gfsp_key = 0
                    if row[0] is not None:
                        gfsp_project_name = unicodedata.normalize('NFKD', row[0]).encode('ascii', 'ignore').strip()
                    else:
                        gfsp_project_name = None
                    gfsp_dprtmnt_code = "DPR"
                    if row[1] is not None:
                        gsi_cd_drvn = unicodedata.normalize('NFKD', row[1]).encode('ascii', 'ignore').strip().upper()
                    else:
                        gsi_cd_drvn = None
                    if row[2] is not None:
                        sw_funct = unicodedata.normalize('NFKD', row[2]).encode('ascii', 'ignore').strip().upper()
                    else:
                        sw_funct = None
                    # check if there are multiple facilities per park per year
                    if gsi_cd_drvn is not None and gsi_cd_drvn == 'YES':
                        if sw_funct == 'FC':
                            gfsp_purpose_code = 'FC'
                        elif sw_funct == 'FCWQ' or sw_funct == 'FWQ':
                            gfsp_purpose_code = 'FWQ'
                        elif sw_funct == 'WQ':
                            gfsp_purpose_code = 'WQ'
                        else:
                            gfsp_purpose_code = ""
                    else:
                        gfsp_purpose_code = "VL"
                    gfsp_funder_code = "DPR"
                    if row[3] is not None:
                        gfsp_install_date = int(datetime.datetime.strptime(row[3], '%Y').year)
                    else:
                        gfsp_install_date = None
                    gfsp_last_inspct_date = None
                    gfsp_sca_code = None  # Spatial Query
                    gfsp_cso_bsn_key = None  # Spatial overlay
                    gfsp_crkws_feature_key = None  # Spatial Overly
                    gfsp_src_type_text = "PARK"
                    if row[4] is not None:
                        gfsp_src_id = unicodedata.normalize('NFKD', row[4]).encode('ascii', 'ignore').strip()[:40]
                    else:
                        gfsp_src_id = None
                    shape = row[5].centroid
                    if row[6] is not None:
                        gsi_feat_type = unicodedata.normalize('NFKD', row[6]).encode('ascii', 'ignore').strip()
                    else:
                        gsi_feat_type = None
                    gis_area = row[7]
                    if row[8] is not None:
                        feat_type_sqft_basis = unicodedata.normalize('NFKD', row[8]).encode('ascii', 'ignore').strip()
                    else:
                        feat_type_sqft_basis = None
                    stmwtr_cf_mgd = row[9]
                    gsi_mtgtd_sqft_nbr = row[10]
                    bmp_num = 0

                    stage_pt_dict[key] = [gfsp_key,                 # 0
                                          gfsp_project_name,        # 1
                                          gfsp_dprtmnt_code,        # 2
                                          gfsp_purpose_code,        # 3
                                          gfsp_funder_code,         # 4
                                          gfsp_install_date,        # 5
                                          gfsp_last_inspct_date,    # 6
                                          gfsp_sca_code,            # 7
                                          gfsp_cso_bsn_key,         # 8
                                          gfsp_crkws_feature_key,   # 9
                                          gfsp_src_type_text,       # 10
                                          gfsp_src_id,              # 11
                                          shape,                    # 12
                                          gsi_feat_type,            # 13
                                          gis_area,                 # 14
                                          feat_type_sqft_basis,     # 15
                                          stmwtr_cf_mgd,            # 16
                                          gsi_mtgtd_sqft_nbr,       # 17
                                          bmp_num]                  # 18

                    key += 1

            # Group data by Name per Year
            park_names_per_year = {"park_name": {"year": []}}
            for key in stage_pt_dict.keys():
                gfsp_project_name = stage_pt_dict[key][1]
                gfsp_dprtmnt_code = stage_pt_dict[key][2]
                gfsp_purpose_code = stage_pt_dict[key][3]
                gfsp_funder_code = stage_pt_dict[key][4]
                gfsp_install_date = stage_pt_dict[key][5]
                gfsp_last_inspct_date = stage_pt_dict[key][6]
                gfsp_sca_code = stage_pt_dict[key][7]
                gfsp_cso_bsn_key = stage_pt_dict[key][8]
                gfsp_crkws_feature_key = stage_pt_dict[key][9]
                gfsp_src_type_text = stage_pt_dict[key][10]
                gfsp_src_id = stage_pt_dict[key][11]
                shape = stage_pt_dict[key][12]
                gsi_feat_type = stage_pt_dict[key][13]
                gis_area = stage_pt_dict[key][14]
                feat_type_sqft_basis = stage_pt_dict[key][15]
                stmwtr_cf_mgd = stage_pt_dict[key][16]
                gsi_mtgtd_sqft_nbr = stage_pt_dict[key][17]
                bmp_num = stage_pt_dict[key][18]
                if gfsp_src_id not in park_names_per_year.keys():
                    gfsp_key = int(carto_conn.execute(gKeySQL))
                    park_names_per_year[gfsp_src_id] = {}
                    park_names_per_year[gfsp_src_id][gfsp_install_date] = [gfsp_key,  # 0
                                                                           gfsp_project_name,  # 1
                                                                           gfsp_dprtmnt_code,  # 2
                                                                           gfsp_purpose_code,  # 3
                                                                           gfsp_funder_code,  # 4
                                                                           gfsp_install_date,  # 5
                                                                           gfsp_last_inspct_date,  # 6
                                                                           gfsp_sca_code,  # 7
                                                                           gfsp_cso_bsn_key,  # 8
                                                                           gfsp_crkws_feature_key,  # 9
                                                                           gfsp_src_type_text,  # 10
                                                                           gfsp_src_id,  # 11
                                                                           shape,  # 12
                                                                           gsi_feat_type,  # 13
                                                                           gis_area,  # 14
                                                                           feat_type_sqft_basis,  # 15
                                                                           stmwtr_cf_mgd,  # 16
                                                                           gsi_mtgtd_sqft_nbr,  # 17
                                                                           bmp_num]  # 18

                elif gfsp_install_date not in park_names_per_year[gfsp_src_id].keys():
                    gfsp_key = int(carto_conn.execute(gKeySQL))
                    park_names_per_year[gfsp_src_id][gfsp_install_date] = [gfsp_key,  # 0
                                                                           gfsp_project_name,  # 1
                                                                           gfsp_dprtmnt_code,  # 2
                                                                           gfsp_purpose_code,  # 3
                                                                           gfsp_funder_code,  # 4
                                                                           gfsp_install_date,  # 5
                                                                           gfsp_last_inspct_date,  # 6
                                                                           gfsp_sca_code,  # 7
                                                                           gfsp_cso_bsn_key,  # 8
                                                                           gfsp_crkws_feature_key,  # 9
                                                                           gfsp_src_type_text,  # 10
                                                                           gfsp_src_id,  # 11
                                                                           shape,  # 12
                                                                           gsi_feat_type,  # 13
                                                                           gis_area,  # 14
                                                                           feat_type_sqft_basis,  # 15
                                                                           stmwtr_cf_mgd,  # 16
                                                                           gsi_mtgtd_sqft_nbr,  # 17
                                                                           bmp_num]  # 18

                else:
                    grouped_data = park_names_per_year[gfsp_src_id][gfsp_install_date]
                    if grouped_data[0] is None or grouped_data[0] is 0:
                        grouped_data[0] = int(carto_conn.execute(gKeySQL))
                    if grouped_data[1] is None:
                        grouped_data[1] = gfsp_project_name
                    if grouped_data[2] is None:
                        grouped_data[2] = gfsp_dprtmnt_code
                    if grouped_data[3] is None or len(grouped_data[3]) < len(gfsp_purpose_code):
                        grouped_data[3] = gfsp_purpose_code
                    if grouped_data[4] is None:
                        grouped_data[4] = gfsp_funder_code
                    if grouped_data[5] is None:
                        grouped_data[5] = gfsp_install_date
                    if grouped_data[6] is None:
                        grouped_data[6] = gfsp_last_inspct_date
                    if grouped_data[7] is None:
                        grouped_data[7] = stage_pt_dict[key][7]
                    if grouped_data[8] is None:
                        grouped_data[8] = stage_pt_dict[key][8]
                    if grouped_data[9] is None:
                        grouped_data[9] = stage_pt_dict[key][9]
                    if grouped_data[10] is None:
                        grouped_data[10] = stage_pt_dict[key][10]
                    if grouped_data[11] is None:
                        grouped_data[11] = stage_pt_dict[key][11]
                    if grouped_data[12] is None:
                        grouped_data[12] = stage_pt_dict[key][12]
                    if grouped_data[13] is None:
                        grouped_data[13] = stage_pt_dict[key][13]
                    if grouped_data[14] is None:
                        grouped_data[14] = stage_pt_dict[key][14]
                    if grouped_data[15] is None:
                        grouped_data[15] = stage_pt_dict[key][15]
                    if grouped_data[16] is None:
                        grouped_data[16] = stage_pt_dict[key][16]
                    if grouped_data[17] is None:
                        grouped_data[17] = stage_pt_dict[key][17]
                    if grouped_data[18] is None:
                        grouped_data[18] = stage_pt_dict[key][18]

            # Insert data into CARTO.GSI_DPRF_STAGE_PT
            with arcpy.da.InsertCursor(dpr_facilities_stage_pt_temp_path, dpr_facilities_stage_pt_fields) as pt_insert:
                for key in park_names_per_year.keys():
                    if "park_name" not in key.lower():
                        for year in park_names_per_year[key].keys():
                            gfsp_key = park_names_per_year[key][year][0]
                            gfsp_project_name = park_names_per_year[key][year][1]
                            gfsp_dprtmnt_code = park_names_per_year[key][year][2]
                            gfsp_purpose_code = park_names_per_year[key][year][3]
                            gfsp_funder_code = park_names_per_year[key][year][4]
                            gfsp_install_date = park_names_per_year[key][year][5]
                            gfsp_last_inspct_date = park_names_per_year[key][year][6]
                            gfsp_sca_code = park_names_per_year[key][year][7]  # Spatial Overlay Values
                            gfsp_cso_bsn_key = park_names_per_year[key][year][8]  # Spatial Overlay Values
                            gfsp_crkws_feature_key = park_names_per_year[key][year][9]  # Spatial Overlay Values
                            gfsp_src_type_text = park_names_per_year[key][year][10]
                            gfsp_src_id = park_names_per_year[key][year][11]
                            shape = park_names_per_year[key][year][12]

                            record = gfsp_key, \
                                gfsp_project_name, \
                                gfsp_dprtmnt_code, \
                                gfsp_purpose_code, \
                                gfsp_funder_code, \
                                gfsp_install_date, \
                                gfsp_last_inspct_date, \
                                gfsp_sca_code, \
                                gfsp_cso_bsn_key, \
                                gfsp_crkws_feature_key, \
                                gfsp_src_type_text, \
                                gfsp_src_id, \
                                shape

                            pt_insert.insertRow(record)

            # Create layer representation of STAGE_PT
            stage_pt_temp = "stage_pt_temp_dpr_facilities"
            arcpy.MakeFeatureLayer_management(dpr_facilities_stage_pt_temp_path, stage_pt_temp)

            # Spatial Overlay
            spatial_overlay(stage_pt_temp, scaVal, sca_lyr, "SCA_CLASS_CODE", "GFSP_SCA_CODE")
            spatial_overlay(stage_pt_temp, None, bsn_lyr, "CSOB_KEY", "GFSP_CSO_BSN_KEY")
            spatial_overlay(stage_pt_temp, None, wtrshd_lyr, "UCWS_FEA_KEY", "GFSP_CRKWS_FEATURE_KEY")

            summed_dpr_trees = {"park_name": {"year": {"bmp_type":
                                              ["gfsb_key",                  # 0
                                               "gfsb_gfsp_key",             # 1
                                               "gfsb_cso_bsn_key",          # 2
                                               "gfsb_bmp_code",             # 3
                                               "gfsb_bmp_nbr",              # 4
                                               "gfsb_infltrt_sqft_nbr",     # 5
                                               "gfsb_drng_sqft_nbr",        # 6
                                               "gfsb_mngd_sqft_nbr",        # 7
                                               "gfsb_mngd_rnf_cbft",        # 8
                                               "gfsb_mngd_gln_nbr",         # 9
                                               "shape"]}}}                   # 10

            # Regroup data by Park Name, Year, and BMP Type
            for key in stage_pt_dict.keys():
                gfsp_src_id = stage_pt_dict[key][11]
                gfsp_install_date = stage_pt_dict[key][5]
                grouped_data_per_year = park_names_per_year[gfsp_src_id][gfsp_install_date]
                gfsb_gfsp_key = grouped_data_per_year[0]
                shape = stage_pt_dict[key][12]
                gsi_feat_type = stage_pt_dict[key][13]
                gis_area = stage_pt_dict[key][14]
                feat_type_sqft_basis = stage_pt_dict[key][15]
                stmwtr_cf_mgd = stage_pt_dict[key][16]
                gsi_mtgtd_sqft_nbr = stage_pt_dict[key][17]
                gfsb_cso_bsn_key = None  # Spatial Overlay
                with arcpy.da.SearchCursor(stage_pt_temp, ["GFSP_CSO_BSN_KEY", "SHAPE@"]) as cso_bsn_search:
                    for row in cso_bsn_search:
                        if shape.equals(row[1]):
                            gfsb_cso_bsn_key = row[0]
                gfsb_bmp_code = None
                if "vegetated roof" in gsi_feat_type.lower():
                    gfsb_bmp_code = "GRF"
                elif "splashblock downspout dispersion" in gsi_feat_type.lower():
                    gfsb_bmp_code = "REM"
                elif "permeable pavement surface" in gsi_feat_type.lower():
                    gfsb_bmp_code = "PPS"
                elif "permeable pavement facility" in gsi_feat_type.lower():
                    gfsb_bmp_code = "PPF"
                elif "cistern" in gsi_feat_type.lower():
                    gfsb_bmp_code = "CST"
                elif "biofiltration swale" in gsi_feat_type.lower():
                    if "underdrain" in gsi_feat_type.lower():
                        gfsb_bmp_code = "BSU"
                    else:
                        gfsb_bmp_code = "BSW"
                elif "bioretention" in gsi_feat_type.lower():
                    if "without" in gsi_feat_type.lower() or "swale" in gsi_feat_type.lower():
                        gfsb_bmp_code = "BIO"
                    elif "with" in gsi_feat_type.lower():
                        if gfsb_cso_bsn_key is None:
                            gfsb_bmp_code = "BUN"
                        else:
                            gfsb_bmp_code = "BUC"
                    else:
                        gfsb_bmp_code = "BIO"
                elif "sheet flow dispersion" in gsi_feat_type.lower():
                    gfsb_bmp_code = "BIO"
                elif "infiltration trench" in gsi_feat_type.lower():
                    if gfsb_cso_bsn_key is None:
                        gfsb_bmp_code = "BUN"
                    else:
                        gfsb_bmp_code = "BUC"
                gfsb_bmp_nbr = 1
                gfsb_infltrt_sqft_nbr = int(round(gis_area))
                gfsb_drng_sqft_nbr = None
                if feat_type_sqft_basis is not None and feat_type_sqft_basis.lower() == 'bmp bottom area':
                    has_bottom_bmp = True
                else:
                    has_bottom_bmp = False

                if gfsb_bmp_code is None:
                    gfsb_mngd_sqft_nbr = 0
                    gfsb_mngd_rnf_cbft = 0
                    gfsb_mngd_gln_nbr = 0

                else:
                    # if gfsb_bmp_code is not None and gfsb_bmp_code in \
                    #         ['BUC', 'BUN', 'BSW', 'BSU', 'BIO', 'BIN', 'BND'] \
                    #         and feat_type_sqft_basis is not None and "swale" not in gsi_feat_type.lower():
                    #     if feat_type_sqft_basis != 'BMP bottom area':
                    #         gfsb_infltrt_sqft_nbr = int(round(gis_area * 0.25))

                    gfsb_mngd_sqft_nbr = gsi_mtgtd_sqft_nbr
                    if gsi_mtgtd_sqft_nbr is None:
                        result = 0
                        for bmp in lstBMPFactor:
                            bmp_factor = unicodedata.normalize('NFKD', bmp[0]).encode('ascii', 'ignore').strip().lower()
                            mngd_type = unicodedata.normalize('NFKD', bmp[1]).encode('ascii', 'ignore').strip().lower()
                            if bmp_factor == gfsb_bmp_code.lower():
                                if 'div' in mngd_type:
                                    result = gfsb_infltrt_sqft_nbr / bmp[2]
                                elif 'mul' in mngd_type:
                                    result = gfsb_infltrt_sqft_nbr * bmp[2]
                        gfsb_mngd_sqft_nbr = int(round(result))

                    gfsb_mngd_rnf_cbft = stmwtr_cf_mgd
                    if stmwtr_cf_mgd is None:
                        result = 0
                        for bmp in lstBMPFactor:
                            bmp_factor = unicodedata.normalize('NFKD', bmp[0]).encode('ascii', 'ignore').strip().lower()
                            if bmp_factor == gfsb_bmp_code.lower():
                                result = gfsb_mngd_sqft_nbr * bmp[3] * bmp[4]
                        gfsb_mngd_rnf_cbft = int(round(result))
                    result = 0
                    for bmp in lstBMPFactor:
                        bmp_factor = unicodedata.normalize('NFKD', bmp[0]).encode('ascii', 'ignore').strip().lower()
                        if bmp_factor == gfsb_bmp_code.lower():
                            matching_bmp = bmp_factor
                            result = gfsb_mngd_rnf_cbft * bmp[5]
                    gfsb_mngd_gln_nbr = int(round(result))

                if gfsp_src_id not in summed_dpr_trees.keys():
                    gfsb_key = int(carto_conn.execute(gKeySQL))
                    summed_dpr_trees[gfsp_src_id] = {}
                    summed_dpr_trees[gfsp_src_id][gfsp_install_date] = {}
                    summed_dpr_trees[gfsp_src_id][gfsp_install_date][gfsb_bmp_code] = [gfsb_key,
                                                                                       gfsb_gfsp_key,
                                                                                       gfsb_cso_bsn_key,
                                                                                       gfsb_bmp_code,
                                                                                       gfsb_bmp_nbr,
                                                                                       gfsb_infltrt_sqft_nbr,
                                                                                       gfsb_drng_sqft_nbr,
                                                                                       gfsb_mngd_sqft_nbr,
                                                                                       gfsb_mngd_rnf_cbft,
                                                                                       gfsb_mngd_gln_nbr,
                                                                                       shape,
                                                                                       has_bottom_bmp]
                elif gfsp_install_date not in summed_dpr_trees[gfsp_src_id].keys():
                    gfsb_key = int(carto_conn.execute(gKeySQL))
                    summed_dpr_trees[gfsp_src_id][gfsp_install_date] = {}
                    summed_dpr_trees[gfsp_src_id][gfsp_install_date][gfsb_bmp_code] = [gfsb_key,
                                                                                       gfsb_gfsp_key,
                                                                                       gfsb_cso_bsn_key,
                                                                                       gfsb_bmp_code,
                                                                                       gfsb_bmp_nbr,
                                                                                       gfsb_infltrt_sqft_nbr,
                                                                                       gfsb_drng_sqft_nbr,
                                                                                       gfsb_mngd_sqft_nbr,
                                                                                       gfsb_mngd_rnf_cbft,
                                                                                       gfsb_mngd_gln_nbr,
                                                                                       shape,
                                                                                       has_bottom_bmp]
                elif gfsb_bmp_code not in summed_dpr_trees[gfsp_src_id][gfsp_install_date].keys():
                    gfsb_key = int(carto_conn.execute(gKeySQL))
                    summed_dpr_trees[gfsp_src_id][gfsp_install_date][gfsb_bmp_code] = [gfsb_key,
                                                                                       gfsb_gfsp_key,
                                                                                       gfsb_cso_bsn_key,
                                                                                       gfsb_bmp_code,
                                                                                       gfsb_bmp_nbr,
                                                                                       gfsb_infltrt_sqft_nbr,
                                                                                       gfsb_drng_sqft_nbr,
                                                                                       gfsb_mngd_sqft_nbr,
                                                                                       gfsb_mngd_rnf_cbft,
                                                                                       gfsb_mngd_gln_nbr,
                                                                                       shape,
                                                                                       has_bottom_bmp]
                else:
                    grouped_data = summed_dpr_trees[gfsp_src_id][gfsp_install_date][gfsb_bmp_code]
                    if grouped_data[0] is None or grouped_data[0] is 0:
                        grouped_data[0] = int(carto_conn.execute(gKeySQL))
                    if grouped_data[1] is None:
                        grouped_data[1] = stage_pt_dict[key][1]
                    if grouped_data[2] is None:
                        grouped_data[2] = stage_pt_dict[key][2]
                    if grouped_data[3] is None:
                        grouped_data[3] = stage_pt_dict[key][3]
                    grouped_data[4] += 1
                    grouped_data[5] += gfsb_infltrt_sqft_nbr
                    grouped_data[7] += gfsb_mngd_sqft_nbr
                    grouped_data[8] += gfsb_mngd_rnf_cbft
                    grouped_data[9] += gfsb_mngd_gln_nbr
                    if grouped_data[10] is None:
                        grouped_data[10] = stage_pt_dict[key][10]
                    if grouped_data[11] is False:
                        grouped_data[11] = has_bottom_bmp

            path = dpr_facilities_stage_bmp_temp_path
            fields = dpr_facilities_stage_bmp_fields

            # Insert data into CARTO.GSI_DPRF_STAGE_BMP
            with arcpy.da.InsertCursor(path, fields) as bmp_insert:
                for address in summed_dpr_trees.keys():
                    if address is not "park_name":
                        for year in summed_dpr_trees[address].keys():
                            for dict_bmp_code in summed_dpr_trees[address][year]:
                                grouped_data_for_bmp = summed_dpr_trees[address][year][dict_bmp_code]
                                gfsb_key = grouped_data_for_bmp[0]
                                gfsb_gfsp_key = grouped_data_for_bmp[1]
                                # gfsb_cso_bsn_key = summed_dpr_trees[address][year][1]  # Spatial Overlay
                                gfsb_bmp_code = grouped_data_for_bmp[3]
                                gfsb_bmp_nbr = grouped_data_for_bmp[4]
                                gfsb_infltrt_sqft_nbr = grouped_data_for_bmp[5]
                                gfsb_drng_sqft_nbr = grouped_data_for_bmp[6]
                                gfsb_mngd_sqft_nbr = int(grouped_data_for_bmp[7])
                                gfsb_mngd_rnf_cbft = int(grouped_data_for_bmp[8])
                                gfsb_mngd_gln_nbr = int(grouped_data_for_bmp[9])
                                shape = grouped_data_for_bmp[10]

                                record = gfsb_key, gfsb_gfsp_key, gfsb_bmp_code, gfsb_bmp_nbr, \
                                    gfsb_infltrt_sqft_nbr, gfsb_drng_sqft_nbr, gfsb_mngd_sqft_nbr, gfsb_mngd_rnf_cbft, \
                                    gfsb_mngd_gln_nbr, shape

                                bmp_insert.insertRow(record)

            # Truncate/Append Base Feature Class
            arcpy.TruncateTable_management(dpr_facilities_stage_pt_path)
            arcpy.Append_management(dpr_facilities_stage_pt_temp_path, dpr_facilities_stage_pt_path)

            # Truncate/Append Base Feature Class
            arcpy.TruncateTable_management(dpr_facilities_stage_bmp_path)
            arcpy.Append_management(dpr_facilities_stage_bmp_temp_path, dpr_facilities_stage_bmp_path)

        else:
            raise EnvironmentError("DPR Facility Base Tables Don't Exist.")

    except Exception as e:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: {0}'.format(str(e)))
        logModule.writeExceptionToLogger(logFile, ' Traceback: {0}'.format(traceback.format_exc()))

    finally:
        # if start_timestamp is not None:
        #     seconds, minutes, hours = delta_time_system_timer(start_timestamp)
        #     logModule.writeLog2(logFile,
        #                         "{0} Completed in {1} hours, {2} minutes, and {3} seconds."
        #                         .format(sys._getframe().f_code.co_name,
        #                                 hours,
        #                                 minutes,
        #                                 seconds))
        if arcpy.Exists(dpr_facilities_stage_pt_temp_path):
            arcpy.Delete_management(dpr_facilities_stage_pt_temp_path)
        if arcpy.Exists(dpr_facilities_stage_bmp_temp_path):
            arcpy.Delete_management(dpr_facilities_stage_bmp_temp_path)


def GSI_PT_PV():
    # start_timestamp = delta_time_system_timer(0)
    try:
        # Truncate PV and create TEMP
        pv = "GSI_PT_PV"
        arcpy.TruncateTable_management(pv)

        temp = "GSI_PT_PV_TEMP"
        arcpy.Copy_management(pv, temp)

        # Create TEMP with altered field names
        fieldList = arcpy.ListFields(temp)  # get a list of fields
        for field in fieldList:
            if 'GSI' in field.name:  # look for TEMP
                arcpy.AlterField_management(temp, field.name, field.name.replace("GSI", "TEMP"))

        GSI_SPU_STAGE_PT = "GSI_SPU_STAGE_PT"
        GSI_SPU_STAGE_BMP = "GSI_SPU_STAGE_BMP"
        GSI_PP_STAGE_PT = "GSI_PP_STAGE_PT"
        GSI_PP_STAGE_BMP = "GSI_PP_STAGE_BMP"
        GSI_RW_STAGE_PT = "GSI_RW_STAGE_PT"
        GSI_RW_STAGE_BMP = "GSI_RW_STAGE_BMP"
        GSI_SDCI_STAGE_PT = "GSI_SDCI_STAGE_PT"
        GSI_SDCI_STAGE_BMP = "GSI_SDCI_STAGE_BMP"
        GSI_SDOT_STAGE_PT = "GSI_SDOT_STAGE_PT"
        GSI_SDOT_STAGE_BMP = "GSI_SDOT_STAGE_BMP"
        GSI_DPRT_STAGE_PT = "GSI_DPRT_STAGE_PT"
        GSI_DPRT_STAGE_BMP = "GSI_DPRT_STAGE_BMP"
        GSI_DPRF_STAGE_PT = "GSI_DPRF_STAGE_PT"
        GSI_DPRF_STAGE_BMP = "GSI_DPRF_STAGE_BMP"

        lstFCs = [[GSI_SPU_STAGE_PT, GSI_SPU_STAGE_BMP], [GSI_PP_STAGE_PT, GSI_PP_STAGE_BMP],
                  [GSI_RW_STAGE_PT, GSI_RW_STAGE_BMP], [GSI_SDCI_STAGE_PT, GSI_SDCI_STAGE_BMP],
                  [GSI_SDOT_STAGE_PT, GSI_SDOT_STAGE_BMP], [GSI_DPRT_STAGE_PT, GSI_DPRT_STAGE_BMP],
                  [GSI_DPRF_STAGE_PT, GSI_DPRF_STAGE_BMP]]

        temp_lyr = "temp_lyr"
        arcpy.MakeFeatureLayer_management(temp, temp_lyr)

        # Open edit session
        # msg = "<<<Opening Editing Session>>>"
        # logModule.writeLog2(logFile, msg)

        edit = arcpy.da.Editor(sde)
        # Edit session is started with an undo/redo stack (first argument)
        # for versioned data (second argument) (For the second argument, use False if editing unversioned data)
        edit.startEditing(True, False)
        edit.startOperation()

        # For each PT and BMP pair
        for fc in lstFCs:
            pt = fc[0]
            bmp = fc[1]

            msg = "Processing {0} and {1}".format(pt, bmp)
            logModule.writeLog2(logFile, msg)

            # Create feature layers
            pt_lyr = "pt_lyr"
            arcpy.MakeFeatureLayer_management(pt, pt_lyr)

            bmp_lyr = "bmp_lyr"
            arcpy.MakeFeatureLayer_management(bmp, bmp_lyr)

            # Get TEMP field names
            lstFields2 = [f.name for f in arcpy.ListFields(temp)]

            # Locate key field names
            lstPTfields = [f.name for f in arcpy.ListFields(pt_lyr) if
                           f.name not in ('OBJECTID, SHAPE, SE_ANNO_CAD_DATA')]
            PK = lstPTfields[0]

            lstBMPfields = [f.name for f in arcpy.ListFields(bmp_lyr) if
                            f.name not in ('OBJECTID, SHAPE, SE_ANNO_CAD_DATA')]  # fixed position
            FK = lstBMPfields[1]

            fiveFields = True
            # Retrieve the correct field name from bmp
            try:
                inft = [f.name for f in arcpy.ListFields(bmp_lyr) if "INFLTRT_SQFT_NBR" in f.name][0]
                drng = [f.name for f in arcpy.ListFields(bmp_lyr) if "DRNG_SQFT_NBR" in f.name][0]
            except IndexError:
                fiveFields = False
                # inft = None
                # drng = None
            msqt = [f.name for f in arcpy.ListFields(bmp_lyr) if "MNGD_SQFT_NBR" in f.name][0]
            mcb = [f.name for f in arcpy.ListFields(bmp_lyr) if "MNGD_RNF_CBFT_NBR" in f.name][0]
            mgln = [f.name for f in arcpy.ListFields(bmp_lyr) if "MNGD_RNF_GLN_NBR" in f.name][0]

            if fiveFields is True:
                lstFields = lstPTfields + [inft, drng, msqt, mcb, mgln]
                lstSelectFields = [str(f) for f in lstFields if f.replace(f.split("_")[0], "TEMP") in lstFields2]
                strFields = ",".join(lstSelectFields)
                # Use SQL group by query on BMP to create one to one relationship with PT (carto connection)
                sql = '''
                SELECT SHAPE, {9} FROM
                {7} p
                LEFT JOIN
                (SELECT {0}, SUM({1}) AS {1}, SUM({2}) AS {2}, SUM({3}) AS {3}, SUM({4}) AS {4}, SUM({5}) AS {5}
                FROM {6}
                GROUP BY {0}) b
                ON p.{8} = b.{0}
                '''.format(FK, inft, drng, msqt, mcb, mgln, bmp, pt, PK, strFields)
            else:
                lstFields = lstPTfields + [msqt, mcb, mgln]
                lstSelectFields = [str(f) for f in lstFields if f.replace(f.split("_")[0], "TEMP") in lstFields2]
                strFields = ",".join(lstSelectFields)
                sql = '''
                SELECT SHAPE, {7} FROM
                {5} p
                LEFT JOIN
                (SELECT {0}, SUM({1}) AS {1}, SUM({2}) AS {2}, SUM({3}) AS {3}
                FROM {4}
                GROUP BY {0}) b
                ON p.{6} = b.{0}
                '''.format(FK, msqt, mcb, mgln, bmp, pt, PK, strFields)

            lstTEMPFields = [str(f.replace(f.split("_")[0], "TEMP")) for f in lstSelectFields]

            cursor = cx_Oracle.Cursor(con)
            cursor.execute(sql)

            rows = cursor.fetchall()
            msg = "Number of records returned: {0}".format(cursor.rowcount)
            logModule.writeLog2(logFile, msg)

            # Insert features into TEMP
            iFields = ["SHAPE@XY"] + lstTEMPFields

            iCur = arcpy.da.InsertCursor(temp_lyr, iFields)

            for row in rows:
                try:
                    pointType = row[0].SDO_POINT  # access the SHAPE's SDO_POINT geometry
                    x = pointType.X
                    y = pointType.Y
                    lstInsert = []
                    lstInsert.append((x, y))
                    for i in xrange(1, len(row)):
                        lstInsert.append(row[i])
                    iCur.insertRow(lstInsert)
                except AttributeError:
                    msg = "{0} {1} has not been loaded into {2}".format(lstFields[0], row[1], temp)
                    logModule.writeLog2(logFile, msg)
            del iCur

            # Close Oracle cursor
            cursor.close()

            # Select from SPU
            if pt == 'GSI_SPU_STAGE_PT':
                gsip_key_field = [i.name for i in arcpy.ListFields(pt_lyr, '*DWW_GSIP_KEY')][0]

                fields_to_select = "GSIP_KEY, GSIP_INFL_SQFT_NBR, GSIP_DRN_SQFT_NBR, GSIP_MNGD_SQFT_NBR, GSIP_MNGD_GLN_NBR"

                fields_to_update = [
                    "TEMP_INFLTRT_SQFT_NBR",
                    "TEMP_DRNG_SQFT_NBR",
                    "TEMP_MNGD_SQFT_NBR",
                    "TEMP_MNGD_RNF_CBFT_NBR",
                    "TEMP_MNGD_RNF_GLN_NBR"
                ]
                # Make a list of XXX_DWW_GSIP_KEY that is not null
                lstGSIPKeys = tuple(
                    [(k[0]) for k in arcpy.da.SearchCursor(pt_lyr, gsip_key_field, gsip_key_field + " IS NOT NULL")])
                # Use GSIP_KEY to find record in GSI_PROJECT (to retrieve infiltration etc)
                sql = '''
                SELECT {0}
                FROM DWW.GSI_PROJECT
                WHERE GSIP_KEY IN {1}
                and not(GSIP_INFL_SQFT_NBR is null
                and GSIP_INFL_SQFT_NBR is null
                and GSIP_MNGD_SQFT_NBR is null
                and GSIP_MNGD_GLN_NBR is null)
                '''.format(fields_to_select, lstGSIPKeys)

                cur = cx_Oracle.Cursor(dww_con)
                cur.execute(sql)
                cx_rows = cur.fetchall()

                # For each GSIP_KEY
                for c in cx_rows:
                    GSIP_KEY, GSIP_INFL_SQFT_NBR, GSIP_DRN_SQFT_NBR, GSIP_MNGD_SQFT_NBR, GSIP_MNGD_GLN_NBR = c
                    lstPKs = sorted(arcpy.da.SearchCursor(pt_lyr, PK, "{0} = {1}".format(gsip_key_field, GSIP_KEY)))
                    # For each PK
                    for k in lstPKs:
                        KEY = k[0]
                        r = GSIP_INFL_SQFT_NBR, GSIP_DRN_SQFT_NBR, GSIP_MNGD_SQFT_NBR, None if GSIP_MNGD_SQFT_NBR is None else GSIP_MNGD_SQFT_NBR * 2.1, GSIP_MNGD_GLN_NBR
                        # Update attributes of the PK in TEMP
                        uCur = arcpy.da.UpdateCursor(temp_lyr, fields_to_update, "TEMP_KEY = {0}".format(KEY))
                        for u in uCur:
                            uCur.updateRow(r)

                        del uCur
                cur.close()

            arcpy.Delete_management(pt_lyr)
            arcpy.Delete_management(bmp_lyr)
            # Loop ends here

        temp2 = "temp2"
        arcpy.CopyFeatures_management(temp_lyr, temp2)

        # # Update CSO_BSN_NAME and export as temp2
        # arcpy.AddJoin_management(temp_lyr, "TEMP_CSO_BSN_KEY", bsn_lyr, "CSOB_KEY", "KEEP_ALL")
        # temp2 = "temp2"
        # arcpy.CopyFeatures_management(temp_lyr, temp2)
        #
        # LOC_TEXT = [i.name for i in arcpy.ListFields(temp2, '*LOC_TEXT')][0]
        # arcpy.CalculateField_management(temp2, "TEMP_CSO_BSN_NAME", "!" + LOC_TEXT + "!", "PYTHON")
        #

        # Add CSO_BSN_NAME to temp2 feature class
        temp2_bsn_fields = ["TEMP_CSO_BSN_KEY", "TEMP_CSO_BSN_NAME"]
        bsn_fields = ["CSOB_KEY", "CSOB_OUTFALL_LOC_TEXT"]
        with arcpy.da.UpdateCursor(temp2, temp2_bsn_fields) as temp2_search:
            for temp_row in temp2_search:

                if temp_row[0] is not None:  # If Name needs to be populated
                    bsn_where_condition = """CSOB_KEY = {0}""".format(str(temp_row[0]))
                    with arcpy.da.SearchCursor(bsn_lyr, bsn_fields, bsn_where_condition) as bsn_search:
                        for result in bsn_search:
                            try:
                                if result[1] is not None:
                                    temp_row[1] = str(result[1]).strip()
                                    temp2_search.updateRow(temp_row)
                            except Exception as e:
                                print e
                                print "{0}: Alt Name {1}, Name {2}".format(str(temp_row[0]),
                                                                           str(result[1]),
                                                                           str(result[2]))

        # Add GSI_CRKWS_NAME to temp2 feature class
        temp2_wtrshd_fields = ["TEMP_CRKWS_FEATURE_KEY", "TEMP_CRKWS_NAME"]
        wtrshd_fields = ["UCWS_FEA_KEY", "UCWS_ALT_NAME", "UCWS_NAME"]
        temp2_where_condition = """TEMP_CRKWS_FEATURE_KEY IS NOT NULL"""
        with arcpy.da.UpdateCursor(temp2, temp2_wtrshd_fields, temp2_where_condition) as temp3_search:
            for temp_row in temp3_search:
                if temp_row[0] is not None:
                    wtrshd_where_condition = """UCWS_FEA_KEY = {0}""".format(str(temp_row[0]))
                    with arcpy.da.SearchCursor(wtrshd_lyr, wtrshd_fields, wtrshd_where_condition) as wtrsh_search:
                        for result in wtrsh_search:
                            if result[0] == temp_row[0]:
                                try:
                                    if result[1] is not None:
                                        temp_row[1] = str(result[1]).strip()
                                    else:
                                        temp_row[1] = str(result[2]).strip()
                                    temp3_search.updateRow(temp_row)
                                except Exception as e:
                                    print e
                                    print "{0}: Alt Name {1}, Name {2}".format(str(temp_row[0]),
                                                                               str(result[1]),
                                                                               str(result[2]))
                            else:
                                print "{0} does not equal {1}".format(str(result[0]), str(temp_row[0]))



        # Stop the edit operation
        edit.stopOperation()

        # Stop the edit session and save the changes
        edit.stopEditing(True)

        # msg = "<<<Closing Editing Session>>>"
        # logModule.writeLog2(logFile, msg)

        # Delete old temp
        arcpy.Delete_management(temp_lyr)
        arcpy.Delete_management(temp)

        # Copy temp2 as new temp, delete temp2
        arcpy.CopyFeatures_management(temp2, temp)
        arcpy.Delete_management(temp2)

        # Rename fields in _TEMP
        logModule.writeLog2(logFile, "Renaming fields in GSI_PT_PV_TEMP")

        fieldList = arcpy.ListFields(temp)  # get a list of fields
        for field in fieldList:
            if 'TEMP' in field.name:  # look for TEMP
                arcpy.AlterField_management(temp, field.name, field.name.replace("TEMP", "GSI"))

        # Count of records in _TEMP
        count = len([x for x in arcpy.da.SearchCursor(temp, "OBJECTID")])

        logModule.writeLog2(logFile, "{0} has {1} records".format(temp, count))

        if count > 0:  # Check to see if there are records in the source - the _TEMP fc.
            # Truncate and load PV
            msg = "Truncate and reload {0}".format(pv)
            logModule.writeLog2(logFile, msg)
            GeoProcModule.truncateAppend(logFile,temp,pv)
            # Delete TEMP
            arcpy.Delete_management(temp)
            # Add Spatial Index
            arcpy.AddSpatialIndex_management(pv)
        else:
            msg = "WARNING: No records to load"
            logModule.writeLog2(logFile, msg)

    except:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
        logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    # finally:
    #     if start_timestamp is not None:
    #         seconds, minutes, hours = delta_time_system_timer(start_timestamp)
    #         logModule.writeLog2(logFile,
    #                             "{0} completed in {1} hours, {2} minutes, and {3} seconds"
    #                             .format(sys._getframe().f_code.co_name,
    #                                     hours, minutes, seconds))


def main():
    total_timestamp = delta_time_system_timer(0)

    try:
        # Check sources
        if check_sources():
            msg = "All input sources verified"
            logModule.writeLog2(logFile, msg)

            # Create Oracle Sequence
            if create_seq():
                msg = "Oracle sequence created"
                logModule.writeLog2(logFile, msg)

                # 2 & 3
                GSI_SPU_STAGE()

                # 4 & 5
                GSI_PP_STAGE()

                # 6 & 7
                GSI_RW_STAGE()

                # 8 & 9
                GSI_SDCI_STAGE()

                # 10 & 11
                GSI_SDOT_STAGE()

                # 12 & 13
                GSI_DPRT_STAGE()

                # 14 & 15
                GSI_DPRF_STAGE()

                # 16
                GSI_PT_PV()

            else:
               msg = "Oracle sequence did not get created/dropped successfully, script will stop now"
               logModule.writeLog2(logFile, msg)

        else:
            msg = "One of the input sources is missing, script will stop now"
            logModule.writeLog2(logFile, msg)

        arcpy.Delete_management("in_memory")


    except arcpy.ExecuteError():
        msg = "ERROR : {0}".format(arcpy.GetMessages(2))
        logModule.writeLog2(logFile, msg)

    except:
        e = sys.exc_info()[0]
        logModule.writeExceptionToLogger(logFile, 'EXCEPTION: ' + str(e))
        logModule.writeExceptionToLogger(logFile, ' Traceback: ' + traceback.format_exc())

    finally:
        if total_timestamp is not None:
            #script_name = "Citywide_GSI.py"
            seconds, minutes, hours = delta_time_system_timer(total_timestamp)
            logModule.writeLog2(logFile,
                                "{0} Completed in {1} hours, {2} minutes, and {3} seconds."
                                .format(scriptName,
                                        hours,
                                        minutes,
                                        seconds))
        logModule.writeLog2(logFile, "END {0}".format(scriptName))
        # Close oracle connections
        if con is not None:
            con.close()
        if dww_con is not None:
            dww_con.close()


if __name__ == "__main__":
    main()
